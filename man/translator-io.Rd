% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/translator.R
\name{translator_read}
\alias{translator_read}
\alias{translator_write}
\alias{translations_read}
\alias{translations_write}
\title{Read and Write Translations}
\usage{
translator_read(path = getOption("transltr.default.path"), encoding = "UTF-8")

translator_write(x = translator(), path = getOption("transltr.default.path"))

translations_read(path = "", encoding = "UTF-8")

translations_write(x = translator(), path = "", lang = "")
}
\arguments{
\item{path}{A character string. A path to a file to read from, or write to.
Its parent directories are automatically created using \code{\link[=dir.create]{dir.create()}} if
they do not exist.

By default, \code{\link[=translator_read]{translator_read()}}, and \code{\link[=translator_write]{translator_write()}} respectively
reads from, and writes to a default location given by global \R option
\code{transltr.default.path}. It points to a standard
\strong{Portable Translator File}. See Details below.}

\item{encoding}{A non-empty and non-\link[base:NA]{NA} character string. The
underlying source character encoding. In almost all cases, this should
be UTF-8. Other encodings are internally re-encoded to UTF-8 for
portability.}

\item{x}{An object of class \code{\link{Translator}}.}

\item{lang}{A non-empty and non-\link[base:NA]{NA} character string. The
underlying language.

A language is usually a code (of two or three letters) for a native
language name. While users retain full control over codes, it is best
to use language codes stemming from well-known schemes such as
\href{https://en.wikipedia.org/wiki/IETF_language_tag}{IETF BCP 47}, or
\href{https://en.wikipedia.org/wiki/List_of_ISO_639_language_codes}{ISO 639-1}.
Doing so maximizes portability and cross-compatibility between packages.}
}
\value{
\code{\link[=translator_read]{translator_read()}} returns an \code{\link[R6:R6Class]{R6}} object of class
\code{\link{Translator}}.

\code{\link[=translator_write]{translator_write()}} returns \code{NULL}, invisibly. It is used for its
side-effects:
\itemize{
\item it writes a Portable Translator File to \code{path}, and
\item it writes further Portable Translations File(s) in the same directory
as \code{path}. One file per non-source native language defined in \code{x} is
created. Therefore, you may start supporting a new language by simply
adding a new entry to \code{\link[=Translator]{Translator$native_languages}}.
}

\code{\link[=translations_read]{translations_read()}} returns an S3 object of class
\code{\link[=export]{ExportedTranslations}}. Consider using \code{\link[=translator_read]{translator_read()}}
instead.

\code{\link[=translations_write]{translations_write()}} returns \code{NULL}, invisibly. It is used for its
side-effect of creating a single Portable Translations File.
}
\description{
Read (import) \emph{Portable Translator/Translations Files}, and convert them
to \code{\link{Translator}} objects.

Write (export) \code{\link{Translator}} objects as
\emph{Portable Translators/Translations Files}.
}
\details{
\code{\link[=translator_write]{translator_write()}} creates two types of file: a single
\emph{Portable Translator File}, and further \emph{Portable Translations Files}. Both
can be referred to as \code{PTF} files, and jointly represents all the information
contained within a \code{\link{Translator}} object. As such, PTF files are
closely tied by design, work together, but target different audiences:
\itemize{
\item Portable Translator Files are useful to developers, and
\item Portable Translations Files are useful to non-technical collaborators
such as translators.
}
\subsection{Portable Translator File}{

A Portable Translator File (PTF) is a human-friendly, cross language,
and textual representation (serialization) of a \code{\link{Translator}}
object. The format heavily relies on \href{https://yaml.org/spec/1.1/}{YAML 1.1},
a popular data serialization format. However, users do not actually have to
know anything about YAML to read, or write \code{\link{Translator}}
objects.

Portable Translator Files are snapshots of \code{\link{Translator}}
objects. To ease collaboration and maintenance, translations are grouped by
language, and stored in separate Portable Translations Files). These files
are listed and referenced by the \verb{Translations Files} field of a Portable
Translator File.
}

\subsection{Portable Translations File}{

A Portable Translations File (PTF) is a human-friendly, cross language,
and textual representation (serialization) of the translations contained
by a \code{\link{Translator}} object. It has two parts:
\enumerate{
\item a YAML header containing basic information on source and target
languages, and
\item a sequence of unindented (flat) and named sections.
}

See \code{\link[=export]{export()}} for more information.

Note that \code{\link[=translator_write]{translator_write()}} never creates a Portable Translations File
for the source language itself. Attempting to translate the source text to
itself makes no sense.
}

\subsection{Working with PTF files}{

The easiest way to import translations is to use \code{\link[=translator_read]{translator_read()}}. This
function is designed to read all related PTFs, extract their contents, and
construct a suitable \code{\link{Translator}} object from it. This is the
preferred interface. The same is true for \code{\link[=translator_write]{translator_write()}}.

Users may read, or write individual Portable Translations Files with
\code{\link[=translations_read]{translations_read()}}, and \code{\link[=translations_write]{translations_write()}}, respectively. This
can be useful for debugging purposes. See Examples below.
}

\subsection{Encodings}{

\strong{The preferred encoding is (and should always be) UTF-8.} If another
encoding must be used for some obscure reason, the \code{encoding} argument
has to be updated. Encodings should be known, never inferred.

\code{\link[=translator_write]{translator_write()}}, and \code{\link[=translations_write]{translations_write()}} enforces UTF-8. This
cannot be changed.
}

\subsection{Requirements}{

To export a \code{\link{Translator}}, the underlying registered
\code{\link{Text}} objects must have the same source language (the same
\code{\link[=Text]{Text$source_lang}} value). An error is thrown otherwise.
}
}
\examples{
# In what follows, ASCII characters are preferred because R has poor
# support for non-ASCII characters used in man pages, and they must
# be used cautiously. In practice, any alphabet (any UTF-8 character)
# may be used to represent native languages and translations.

# Set source language.
language_source_set("en")

# Define a location where Portable Translator Files are written.
temp_path <- tempfile(pattern = "_translator_", fileext = ".yml")

# Create a Translator object.
# This would normally be done automatically
# by find_source(), or translator_read().
x <- translator(
  id = "test-translator",
  en = "English",
  es = "Español",
  fr = "Français",
  text(
    en = "Hello, world!",
    fr = "Bonjour, monde!"),
  text(
    en = "Farewell, world!",
    fr = "Au revoir, monde!"))

# Export it.
# This creates 3 files:
#
#   1. 1 Portable Translator File for the Translator object, and
#   2. 2 Portable Translations Files (one for each non-source language).
#      The file for language "es" contains placeholders for future
#      translations.
translator_write(x, temp_path)
translator_read(temp_path)

# Inspect their (raw) contents.
cat(readLines(temp_path), sep = "\n")
cat(readLines(file.path(dirname(temp_path), "fr.txt")), sep = "\n")
cat(readLines(file.path(dirname(temp_path), "es.txt")), sep = "\n")

# Translations can be read individually.
# They are serialized as a YAML string
# (on-the-fly) before being displayed.
translations_read(file.path(dirname(temp_path), "fr.txt"))
translations_read(file.path(dirname(temp_path), "es.txt"))

# This is rarely useful, but translations can also be
# exported individually. You may use this to add a new
# language, as long as
#
#   1. it has a corresponding entry in the underlying Translator object, and
#   2. it has corresponding entries in the underlying Portable Translator
#      File (fields languages and translations_files must be updated).
#
# Users should always used translator_write() instead.
x$set_native_languages(el = "Greek")
translations_write(x, file.path(dirname(temp_path), "el.txt"), "el")
translations_read(file.path(dirname(temp_path), "el.txt"))

}
\seealso{
\code{\link{Translator}},
\code{\link[=export]{export()}}
}
