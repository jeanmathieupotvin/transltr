% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/translator-io.R
\name{translator_read}
\alias{translator_read}
\alias{translator_write}
\alias{translations_read}
\alias{translations_write}
\title{Read and Write Translations}
\usage{
translator_read(path = getOption("transltr.default.path"), encoding = "UTF-8")

translator_write(
  tr = translator(),
  path = getOption("transltr.default.path"),
  overwrite = FALSE
)

translations_read(path = "", encoding = "UTF-8", tr)

translations_write(tr = translator(), path = "", lang = "")
}
\arguments{
\item{path}{A non-empty and non-\link[base:NA]{NA} character string. A path to
a file to read from, or write to.
\itemize{
\item This file must be an Exported Translator file for \code{\link[=translator_read]{translator_read()}}.
\item This file must be an Exported Translations file for \code{\link[=translations_read]{translations_read()}}.
}

See Details for more information. \code{\link[=translator_write]{translator_write()}} automatically
creates the parent directory of \code{path} (recursively) if it does not exist.}

\item{encoding}{A non-empty and non-\link[base:NA]{NA} character string. The
underlying source character encoding. In almost all cases, this should
be UTF-8. Other encodings are internally re-encoded to UTF-8 for
portability.}

\item{tr}{A \code{\link{Translator}} object.}

\item{overwrite}{A non-\link[base:NA]{NA} logical value. Should an existing
\emph{Exported Translator} file (pointed to by \code{path}) be overwritten? An
error is thrown otherwise.}

\item{lang}{A non-empty and non-\link[base:NA]{NA} character string. The
underlying language.

A language is usually a code (of two or three letters) for a native
language name. While users retain full control over codes, it is best
to use language codes stemming from well-known schemes such as
\href{https://en.wikipedia.org/wiki/IETF_language_tag}{IETF BCP 47}, or
\href{https://en.wikipedia.org/wiki/List_of_ISO_639_language_codes}{ISO 639-1}
to maximize portability and cross-compatibility.}
}
\value{
\code{\link[=translator_read]{translator_read()}} returns an \code{\link[R6:R6Class]{R6}} object of class
\code{\link{Translator}}.

\code{\link[=translator_write]{translator_write()}} returns \code{NULL}, invisibly. It is used for its
side-effects of simultaneously
\itemize{
\item creating an Exported Translator file to the location given by \code{path}, and
\item creating further Exported Translations file(s) in the same directory as
the Exported Translator file (by default).
}

Note that underlying entries of \verb{Translations Files} (a standard field of
Exported Translator objects) may be modified afterwards. The file paths it
contains are cached by \code{\link[=translations_read]{translations_read()}} and reused automatically.

\code{\link[=translations_read]{translations_read()}} returns an S3 object of class
\code{\link[=export]{ExportedTranslations}}.

\code{\link[=translations_write]{translations_write()}} returns \code{NULL}, invisibly. It is used for its
side-effect of creating a single Exported Translations file to the location
given by \code{path}.
}
\description{
Export \code{\link{Translator}} objects to text files and import such
files back into \R as \code{\link{Translator}} objects.
}
\details{
To ease collaboration and maintenance, the information contained within
a \code{\link{Translator}} object is split. Translations are exported
independently from other fields. Two types of objects are created from
a \code{\link{Translator}} object: a single \emph{Exported Translator}, and
zero, or more \emph{Exported Translations}. These objects are portable because
they are textual representations that can be inspected and modified using
a wide variety of tools and systems.

Exported objects are stored in plain text files. The inner workings of the
serialization process are thoroughly described in \code{\link[=serialize]{serialize()}}.

\code{\link[=translator_write]{translator_write()}} creates two types of file: one file containing an
Exported Translator, and further file(s) containing Exported Translations.
They target different audiences:
\itemize{
\item Exported Translator files are useful to \strong{developers}, and
\item Exported Translations files are useful to \strong{non-technical collaborators}
such as translators.
}
\subsection{Exported Translator}{

An Exported Translator is a \href{https://yaml.org/spec/1.1/}{YAML 1.1}
representation of a \code{\link{Translator}} object stripped of all
its translations except those that are registered as source text. It
references related Exported Translations files via a \verb{Translations Files}
field.
}

\subsection{Exported Translations}{

Translations registered in a \code{\link{Translator}} object are extracted,
grouped by language, and stored in distinct file(s). One Exported
Translations is created for each non-source native language registered in
\code{x}. Fore more information, see \code{\link[=Translator]{Translator$native_languages}}.

An Exported Translations is a \link[=flat_serialize]{FLAT 1.0} representation.
This format is custom, and attempts to be as simple as possible for
non-technical collaborators.
}
}
\examples{
# In what follows, ASCII characters are preferred because R has poor
# support for non-ASCII characters used in documentation (help pages),
# and they must be used cautiously. In practice, any alphabet (any UTF-8
# character) may be used to represent native languages and translations.

# Set source language.
language_source_set("en")

# Create a path to a (future) Exported Translator file.
temp_path <- tempfile(pattern = "translator_", fileext = ".yml")

# Create a Translator object.
# This would normally be done automatically
# by find_source(), or translator_read().
tr <- translator(
  id = "test-translator",
  en = "English",
  es = "Español",
  fr = "Français",
  text(
    en = "Hello, world!",
    fr = "Bonjour, monde!"),
  text(
    en = "Farewell, world!",
    fr = "Au revoir, monde!"))

# Export it.
# This creates 3 files:
#
#   1. 1 Exported Translator file, and
#   2. 2 Exported Translations files (one for language "es" and another
#      one for language "fr"). The file for language "es" contains
#      placeholders for future translations.
translator_write(tr, temp_path)
translator_read(temp_path)

# Inspect their (raw) contents.
cat(readLines(temp_path), sep = "\n")
cat(readLines(file.path(dirname(temp_path), "fr.txt")), sep = "\n")
cat(readLines(file.path(dirname(temp_path), "es.txt")), sep = "\n")

# Translations can be read individually.
translations_read(file.path(dirname(temp_path), "fr.txt"))
translations_read(file.path(dirname(temp_path), "es.txt"))

# This is rarely useful, but translations can also be
# exported individually. You may use this to add a new
# language, as long as
#
#   1. it has a corresponding entry in the underlying Translator object, and
#   2. it has corresponding entries in the underlying Exported Translator
#      (fields 'Languages' and 'Translations Files' must be updated).
#
# Consider using translator_write() instead.
tr$set_native_languages(el = "Greek")
translations_write(tr, file.path(dirname(temp_path), "el.txt"), "el")
translations_read(file.path(dirname(temp_path), "el.txt"))

}
\seealso{
\code{\link{Translator}},
\code{\link[=serialize]{serialize()}}
}
