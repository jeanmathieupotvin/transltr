% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/from-tsf.R
\name{from_tsf}
\alias{from_tsf}
\alias{split_tsf}
\alias{from_tsf_header}
\alias{from_tsf_blocks}
\alias{from_tsf_header_v1}
\alias{from_tsf_blocks_v1}
\alias{from_tsf_block_v1}
\alias{from_tsf_block_title_v1}
\alias{from_tsf_block_txt_v1}
\alias{from_tsf_block_loc_v1}
\alias{from_tsf_block_loc_path_v1}
\alias{from_tsf_block_loc_range_v1}
\alias{tokenize_tsf_block_v1}
\alias{tokenize_tsf_block_line_v1}
\title{Convert Translation Source Files Back to R Objects}
\usage{
from_tsf(x = character())

split_tsf(x = character())

from_tsf_header(x = character())

from_tsf_blocks(
  src_blocks = list(),
  template_version = get_template_versions(),
  hash_algorithm = get_hash_algorithms()
)

from_tsf_header_v1(
  template_version = 1L,
  generated_by,
  generated_on,
  hash_algorithm,
  language_keys,
  ...
)

from_tsf_blocks_v1(src_blocks = list(), hash_algorithm = get_hash_algorithms())

from_tsf_block_v1(tokens = list(), hash_algorithm = get_hash_algorithms())

from_tsf_block_title_v1(token = tsf_block_line_token("TITLE_HASH"))

from_tsf_block_txt_v1(tokens = list())

from_tsf_block_loc_v1(tokens = list())

from_tsf_block_loc_path_v1(token = tsf_block_line_token("LOC_SRC_PATH"))

from_tsf_block_loc_range_v1(token = tsf_block_line_token("LOC_SRC_RNG"))

tokenize_tsf_block_v1(x = character())

tokenize_tsf_block_line_v1(x = character(1L))
}
\arguments{
\item{x}{A character vector of source (unparsed) text lines. There is one
exception: \code{\link[=tokenize_tsf_block_line_v1]{tokenize_tsf_block_line_v1()}} expects a character string.}

\item{src_blocks}{A list of character vector of source (unparsed) text lines.
Each element represents a different source \code{\link{Block}} object.}

\item{template_version}{An integer. The translations source file's format
version. See \code{\link[=get_template_versions]{get_template_versions()}} for available versions.}

\item{hash_algorithm}{A character string equal to one of the values returned
by \code{\link[=get_hash_algorithms]{get_hash_algorithms()}}. The algorithm to use when hashing source
information for identification purposes.}

\item{generated_by}{A character string. How did the translations source
file was generated? This will most likely be a version of the package,
but any other mechanism is fine. Package \code{\link{transltr}} embraces
portability. See \code{\link[=get_generated_by]{get_generated_by()}} for more information.}

\item{generated_on}{A character string. When was the translations source
file generated? See \code{\link[=get_generated_on]{get_generated_on()}} for the actual format.}

\item{language_keys}{A named list of character strings, or a named character
vector. It can be empty.
\itemize{
\item The values are \emph{languages}. For example, \code{"English"}, \code{"Français"},
\code{"日本語"}, etc.
\item The names are \emph{keys} that uniquely identify corresponding languages.
As such, they are referred to as \emph{language keys}. For example,
\code{en}, \code{fr}, \code{ja}, etc.
}

Users retain full control over names and keys, and are free to use
whatever makes sense to them.}

\item{...}{Further header custom fields. They must always be named.}

\item{tokens}{A list of \code{\link[=tsf_block_line_token]{BlockLineToken}}
objects. Some functions such as \code{\link[=from_tsf_block_txt_v1]{from_tsf_block_txt_v1()}} expect these
tokens to be of the same type.}

\item{token}{A single \code{\link[=tsf_block_line_token]{BlockLineToken}} object.}
}
\value{
This section is split according to the top-down hierarchy explained above.

\code{\link[=from_tsf]{from_tsf()}} returns a named list of length 3 containing the following
elements:

\describe{
\item{\code{header}}{The output of \code{\link[=from_tsf_header]{from_tsf_header()}}.}
\item{\code{blocks}}{The output of \code{\link[=from_tsf_blocks]{from_tsf_blocks()}}.}
\item{\code{rest}}{Remaining source lines, in order. These lines are not
part of the header or any block. They are ignored and included as is.
}
}

\if{html}{\out{<div class="sourceCode">}}\preformatted{---
}\if{html}{\out{</div>}}

\code{\link[=split_tsf]{split_tsf()}} returns a named list of length 3 containing the following
elements:

\describe{
\item{\code{header}}{A character vector. The source lines of the header.}
\item{\code{blocks}}{A list of character vector. Each element holds the source
lines of one block.}
\item{\code{rest}}{Remaining source lines, in order. These are lines that are
not part of the header or any block. They are ignored and included as is.
}
}

\if{html}{\out{<div class="sourceCode">}}\preformatted{---
}\if{html}{\out{</div>}}

\code{\link[=from_tsf_header]{from_tsf_header()}} returns a named list. Its contents depends on the
underlying \code{template_version} value.

\code{\link[=from_tsf_blocks]{from_tsf_blocks()}} returns a list containing \code{\link{Block}} objects.

\if{html}{\out{<div class="sourceCode">}}\preformatted{---
}\if{html}{\out{</div>}}

\code{\link[=from_tsf_header_v1]{from_tsf_header_v1()}} returns a named list of length 7 containing the
values of its arguments along with a \code{further_fields} element. The latter
is a named list holding values passed to \code{...}.

\code{\link[=from_tsf_blocks_v1]{from_tsf_blocks_v1()}} returns a list containing \code{\link{Block}} objects.

\if{html}{\out{<div class="sourceCode">}}\preformatted{---
}\if{html}{\out{</div>}}

\code{\link[=from_tsf_block_v1]{from_tsf_block_v1()}} returns a \code{\link{Block}} object.

\code{\link[=from_tsf_block_title_v1]{from_tsf_block_title_v1()}} and \code{\link[=from_tsf_block_txt_v1]{from_tsf_block_txt_v1()}} returns a
character vector.

\code{\link[=from_tsf_block_loc_v1]{from_tsf_block_loc_v1()}} returns a \code{\link{Location}} object.

\code{\link[=from_tsf_block_loc_path_v1]{from_tsf_block_loc_path_v1()}} returns a character string.

\code{\link[=from_tsf_block_loc_range_v1]{from_tsf_block_loc_range_v1()}} returns a named integer vector of length
4 containing the following elements: \code{line1}, \code{col1}, \code{line2}, and \code{col2}.

\if{html}{\out{<div class="sourceCode">}}\preformatted{---
}\if{html}{\out{</div>}}

\code{\link[=tokenize_tsf_block_v1]{tokenize_tsf_block_v1()}} returns a list of
\code{\link[=tsf_block_line_token]{BlockLineToken}} objects. Its order matches
the implicit order of argument \code{x}. Its length is equal to the length of
\code{x}. \code{NULL} tokens are preserved even though they are (typically) never
useful.

\code{\link[=tokenize_tsf_block_line_v1]{tokenize_tsf_block_line_v1()}} returns a single
\code{\link[=tsf_block_line_token]{BlockLineToken}} object.
}
\description{
A collection of \strong{internal} mechanisms to convert \link{Translations Source Files}
back into proper \R objects. Its contents is split, tokenized, parsed, and
validated according to an underlying \code{template_version}. Typical users should
always use \code{\link[=translator_import]{translator_import()}} instead.
}
\details{
All functions above follow an implicit top-down hierarchy. Conceptually,
they break a \link[=Translations Source Files]{Translations Source File} into
smaller components and eventually convert them to \R objects.

\code{\link[=from_tsf]{from_tsf()}} is the entry point as the main function in charge of the
conversion. It relies on \code{\link[=split_tsf]{split_tsf()}} to separate header's source lines
from blocks' source lines, and on \code{\link[=from_tsf_header]{from_tsf_header()}} and \code{\link[=from_tsf_blocks]{from_tsf_blocks()}}
to actually convert these source lines into \R objects.

\if{html}{\out{<div class="sourceCode">}}\preformatted{from_tsf()
  -> split_tsf()
  -> from_tsf_header()
  -> from_tsf_blocks()
}\if{html}{\out{</div>}}
\subsection{Header}{

Since the header is just a set of YAML lines, \code{\link[=from_tsf_header]{from_tsf_header()}} parses
them with \code{\link[yaml:yaml.load]{yaml::yaml.load()}}. Parsed values are validated and transformed
by \code{\link[=from_tsf_header]{from_tsf_header_v*()}} subfunctions.

\if{html}{\out{<div class="sourceCode">}}\preformatted{from_tsf_header()
  -> from_tsf_header_v*()
}\if{html}{\out{</div>}}
}

\subsection{Blocks}{

Blocks consists of (at least) five main components formatted as Markdown
text. They are trickier to parse and validate (compared to headers) because
they are more complex by design.

The highest-level functions are \code{\link[=from_tsf_blocks_v1]{from_tsf_blocks_v*()}}.
They are all vectorized versions of \code{\link[=from_tsf_block_v1]{from_tsf_block_v*()}}
which converts a single set of source lines into a \code{\link{Block}} object.

\if{html}{\out{<div class="sourceCode">}}\preformatted{from_tsf_blocks()
  -> from_tsf_blocks_v*()
       -> tokenize_tsf_block_v*()
            -> tokenize_tsf_block_line_v*()
            -> tsf_block_line_token()
       -> from_tsf_block_v*()
            -> from_tsf_block_title_v*()
            -> from_tsf_block_txt_v*()
            -> from_tsf_block_loc_v*()
                 -> from_tsf_block_loc_path_v*()
                 -> from_tsf_block_loc_range_v*()
}\if{html}{\out{</div>}}

To ease the conversion and validation processes, source lines are first
tokenized. It is important to note that unlike typical tokenizers,
\code{\link[=tokenize_tsf_block_v1]{tokenize_tsf_block_v*()}} tokenizes whole lines.
In the context of a TSF, source lines are the smallest units of meaningful
data (most of the time) and tokenizing them is \emph{enough} for the purposes of
\code{\link{transltr}}. Future versions of the package may introduce a more
formal tokenization process.

There are three main converters.
\itemize{
\item \code{\link[=from_tsf_block_title_v1]{from_tsf_block_title_v*()}} converts Markdown
(H2) titles to proper language keys. See subsection \emph{Language Keys} of
\link{Translations Source Files} for more information.
\item \code{\link[=from_tsf_block_txt_v1]{from_tsf_block_txt_v*()}} converts Markdown
text to proper \R character strings.
\item \code{\link[=from_tsf_block_loc_v1]{from_tsf_block_loc_v*()}} converts Markdown
text to \code{\link{Location}} objects.
}
}
}
\note{
\code{\link[=from_tsf_header_v1]{from_tsf_header_v1()}} assumes \code{template_version} is always equal to
\code{1} and ignores any value passed to it. The argument is included to ease the
implementation of \code{\link[=from_tsf_header]{from_tsf_header()}}.
}
\seealso{
\link{Translations Source Files},
\code{\link[=translator_import]{translator_import()}},
\code{\link[=tsf_block_line_token]{tsf_block_line_token()}}
}
\concept{translations source files mechanisms}
\keyword{internal}
