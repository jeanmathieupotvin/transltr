% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/class-block.R
\name{block}
\alias{block}
\alias{.block}
\alias{is_block}
\alias{format.Block}
\alias{print.Block}
\alias{c.Block}
\alias{merge_blocks}
\alias{as_block}
\alias{as_block.call}
\alias{Block}
\title{Translations}
\usage{
block(source_key = "", ..., hash_algorithm = get_hash_algorithms())

.block(
  source_key = "",
  source_text = "",
  hash_algorithm = get_hash_algorithms(),
  trans_keys = character(),
  trans_texts = character(),
  locations = list()
)

is_block(x)

\method{format}{Block}(x, ...)

\method{print}{Block}(x, ...)

\method{c}{Block}(...)

merge_blocks(..., hash_algorithm = get_hash_algorithms())

as_block(x, ...)

\method{as_block}{call}(x, location = location(), hash_algorithm = get_hash_algorithms(), ...)
}
\arguments{
\item{source_key}{A non-empty and non-\link[base:NA]{NA} character string. The
(default) language key of \code{source_text}. See Details for more information.}

\item{...}{Usage depends on the underlying function.
\itemize{
\item Any number of \code{\link{Location}} objects and/or named character
strings for \code{\link[=block]{block()}} (in no preferred order).
\item Further arguments passed to or from other methods for \code{\link[=format]{format()}},
\code{\link[=print]{print()}}, and \code{\link[=as_block]{as_block()}}.
\item Any number of \code{\link{Block}} objects for \code{\link[=merge_blocks]{merge_blocks()}} and S3
method \code{\link[=c]{c()}}.
}}

\item{hash_algorithm}{A character string. The algorithm to use when hashing
source information for identification purposes. It must be a value returned
by \code{\link[=get_hash_algorithms]{get_hash_algorithms()}}.}

\item{source_text}{A non-empty and non-\link[base:NA]{NA} character string.}

\item{trans_keys}{A character vector of non-empty and non-\link[base:NA]{NA}
values. The language keys identifying elements of \code{trans_texts}.}

\item{trans_texts}{A character vector of of non-empty and non-\link[base:NA]{NA}
values. Translations of \code{source_text}.}

\item{locations}{A list of \code{\link{Location}} objects.}

\item{x}{Any \R object. A \code{\link{Block}} object for \code{\link[=format]{format()}} and
\code{\link[=print]{print()}}.}

\item{location}{A \code{\link{Location}} object.}
}
\value{
\code{\link[=block]{block()}} and \code{\link[=.block]{.block()}} return an \code{\link[R6:R6Class]{R6}} object of class
\code{\link{Block}}. These high-level constructors exposes two different
signatures for convenience (and different use-cases). \code{\link[=block]{block()}} should
be preferred most of the time.

\code{\link[=is_block]{is_block()}} returns a logical.

\code{\link[=format]{format()}} returns a character.

\code{\link[=print]{print()}} returns argument \code{x} invisibly.

\code{\link[=c]{c()}} returns a \code{\link{Block}} object. It can only combine objects
having the exact same \code{hash}, which is equivalent to having the same
\code{hash_algorithm}, \code{source_key}, and \code{source_text}. In that case, the
underlying translations and locations are combined into coherent sets.

\code{\link[=merge_blocks]{merge_blocks()}} returns a list of \code{\link{Block}} objects. It is
a generalized version of \code{\link[=c]{c()}} that handles \code{\link{Block}} objects
having different hash(es).

\code{\link[=as_block]{as_block()}} returns a \code{\link{Block}} object.
}
\description{
Structure and manipulate source texts and their translations.
}
\details{
A \code{\link{Block}} is first and foremost a collection of translations of
a given source text (i.e. text extracted from \R source scripts). These
translations are each identified by a \emph{language key}, a character string
that can be mapped to a native language. For more information, see section
\emph{\link[=Translations Source Files]{Language keys}}.

It has two further components.
\enumerate{
\item A repducible hash derived from an hashing algorithm that can be used
to identify the source key and text.
\item One or more source locations. See class \code{\link{Location}} for more
information.
}

Users should never attempt to manipulate the information contained in a
\code{\link{Block}}. The latter exposes an API to safely do so (see below),
but it is meant to be used internally. Consider using exported features
instead.
}
\examples{
## Create a Block object.
block("en",
    location("a", 1L, 2L, 3L, 4L),
    location("a", 1L, 2L, 3L, 4L),
    location("b", 5L, 6L, 7L, 8L),
    location("c", c(9L, 10L), c(11L, 12L), c(13L, 14L), c(15L, 16L)),
    en = "Hello, world!",
    fr = "Bonjour, monde!",
    es = "¡Hola Mundo!",
    jp = "こんにちは世界！")

## Combine Blocks objects.
b1 <- block("en",
    location("a", 1L, 2L, 3L, 4L),
    en = "Hello, world!",
    fr = "Bonjour, monde!",
    es = "¡Hola Mundo!",
    jp = "こんにちは世界！")

b2 <- block("en",
    location("a", 5L, 6L, 7L, 8L),
    en     = "Hello, world!",
    fr     = "Bonjour, monde!",
    es     = "¡Hola Mundo!",
    `jp-2` = "こんにちは世界！")

b3 <- block("fr",
    location("c", 1L, 2L, 3L, 4L),
    en     = "Hello, world!",
    fr     = "Bonjour, monde!",
    `es-2` = "¡Hola Mundo!",
    `jp-2` = "こんにちは世界！")

c(b1, b2)
merge_blocks(b1, b2, b3)


## ------------------------------------------------
## Method `Block$set_translation`
## ------------------------------------------------

## Registering source_key and source_text.
blk <- Block$new()
blk$set_translation("en", "Hello, world!")
blk$source_key <- "en"

## ------------------------------------------------
## Method `Block$set_translations`
## ------------------------------------------------

blk <- Block$new()
blk$set_translations(en = "Hello, world!", fr = "Bonjour, monde!")

## ------------------------------------------------
## Method `Block$rm_translation`
## ------------------------------------------------

## Removing source_key and source_text.
blk <- Block$new()
blk$set_translations(en = "Hello, world!", fr = "Bonjour, monde!")
blk$source_key <- "en"

blk$source_key <- "fr"
blk$rm_translation("en")
}
\keyword{internal}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{hash}}{A non-empty and non-\link[base:NA]{NA} character string. A
reproducible hash generated from \code{source_key} and \code{source_text}
using the algorithm given by \code{hash_algorithm}. It is used as a
unique identifier for the \code{\link{Block}} object.}

\item{\code{hash_algorithm}}{A non-empty and non-\link[base:NA]{NA} character
string. The algorithm to use when hashing source information for
identification purposes. It must be a value returned by
\code{\link[=get_hash_algorithms]{get_hash_algorithms()}}.}

\item{\code{source_key}}{A non-empty and non-\link[base:NA]{NA} character
string. The language key of \code{source_text}.}

\item{\code{source_text}}{A non-empty and non-\link[base:NA]{NA} character
string. The source text to be translated.}

\item{\code{keys}}{A character vector. Registered language keys.}

\item{\code{translations}}{A non-empty named character vector of
non-\link[base:NA]{NA} values. Registered translations of
\code{source_text}. Names correspond to the underlying language \code{keys}.}

\item{\code{locations}}{A list of \code{\link{Location}} objects giving
the location(s) of \code{source_text} in the underlying project.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-Block-new}{\code{Block$new()}}
\item \href{#method-Block-get_translation}{\code{Block$get_translation()}}
\item \href{#method-Block-set_translation}{\code{Block$set_translation()}}
\item \href{#method-Block-set_translations}{\code{Block$set_translations()}}
\item \href{#method-Block-set_locations}{\code{Block$set_locations()}}
\item \href{#method-Block-rm_translation}{\code{Block$rm_translation()}}
\item \href{#method-Block-rm_location}{\code{Block$rm_location()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Block-new"></a>}}
\if{latex}{\out{\hypertarget{method-Block-new}{}}}
\subsection{Method \code{new()}}{
Create a \code{\link{Block}} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Block$new(hash_algorithm = get_hash_algorithms())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{hash_algorithm}}{A character string. The algorithm to use when hashing
source information for identification purposes. It must be a value returned
by \code{\link[=get_hash_algorithms]{get_hash_algorithms()}}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
An \code{\link[R6:R6Class]{R6}} object of class \code{\link{Block}}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Block-get_translation"></a>}}
\if{latex}{\out{\hypertarget{method-Block-get_translation}{}}}
\subsection{Method \code{get_translation()}}{
Extract a translation.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Block$get_translation(key = "")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{key}}{A non-empty and non-\link[base:NA]{NA} character string. A
language key.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
This method can also be used to extract \code{source_text}.
}

\subsection{Returns}{
A character string. \code{NULL} is returned if \code{key} is not
registered.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Block-set_translation"></a>}}
\if{latex}{\out{\hypertarget{method-Block-set_translation}{}}}
\subsection{Method \code{set_translation()}}{
Register a translation.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Block$set_translation(key = "", text = "")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{key}}{A non-empty and non-\link[base:NA]{NA} character string. A
language key.}

\item{\code{text}}{A non-empty and non-\link[base:NA]{NA} character string. A
translation (or a source text).}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
This method is also used to register \code{source_key} and
\code{source_text} \strong{before} setting them as such. See Examples below.
}

\subsection{Returns}{
A \code{TRUE} (invisibly).
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{## Registering source_key and source_text.
blk <- Block$new()
blk$set_translation("en", "Hello, world!")
blk$source_key <- "en"
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Block-set_translations"></a>}}
\if{latex}{\out{\hypertarget{method-Block-set_translations}{}}}
\subsection{Method \code{set_translations()}}{
Register one or more translations.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Block$set_translations(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Any number of named, non-empty, and non-\link[base:NA]{NA}
character strings.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
This method can be viewed as a vectorized version of
method \code{set_translation()}.
}

\subsection{Returns}{
A \code{TRUE} (invisibly).
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{blk <- Block$new()
blk$set_translations(en = "Hello, world!", fr = "Bonjour, monde!")
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Block-set_locations"></a>}}
\if{latex}{\out{\hypertarget{method-Block-set_locations}{}}}
\subsection{Method \code{set_locations()}}{
Register one or more locations.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Block$set_locations(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Any number of \code{\link{Location}} objects.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A \code{TRUE} (invisibly).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Block-rm_translation"></a>}}
\if{latex}{\out{\hypertarget{method-Block-rm_translation}{}}}
\subsection{Method \code{rm_translation()}}{
Remove a registered translation.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Block$rm_translation(key = "")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{key}}{A non-empty and non-\link[base:NA]{NA} character string. A
language key.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
You cannot remove a \code{key} registered as \code{source_key}.
You must assign a new value as \code{source_key} before doing so.
}

\subsection{Returns}{
A logical (invisibly) indicating whether the operation
succeeded or not.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{## Removing source_key and source_text.
blk <- Block$new()
blk$set_translations(en = "Hello, world!", fr = "Bonjour, monde!")
blk$source_key <- "en"

blk$source_key <- "fr"
blk$rm_translation("en")
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Block-rm_location"></a>}}
\if{latex}{\out{\hypertarget{method-Block-rm_location}{}}}
\subsection{Method \code{rm_location()}}{
Remove a registered location.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Block$rm_location(path = "")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{path}}{A non-empty and non-\link[base:NA]{NA} character string
identifying a \code{\link{Location}} object to be removed.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A \code{TRUE} (invisibly).
}
}
}
