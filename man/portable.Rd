% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/portable.R
\name{portable}
\alias{portable}
\alias{Portable}
\alias{PortableTranslator}
\alias{PortableText}
\alias{PortableLocation}
\alias{PortableTranslations}
\alias{is_portable}
\alias{portable_translator}
\alias{portable_text}
\alias{portable_location}
\alias{portable_translations}
\alias{format.Portable}
\alias{format.PortableTranslator}
\alias{format.PortableTranslations}
\alias{print.Portable}
\alias{as_translator.PortableTranslator}
\alias{as_text.PortableText}
\alias{as_text.Text}
\alias{as_location.PortableLocation}
\alias{as_location.Location}
\title{Portable Objects}
\usage{
portable(x, super = character(), tag = NULL)

is_portable(x)

portable_translator(x = translator(), set_translations = FALSE)

portable_text(x = text(), set_translations = FALSE)

portable_location(x = location())

portable_translations(
  x = translator(),
  lang = NULL,
  placeholder = constant("placeholder")
)

\method{format}{Portable}(x, ...)

\method{format}{PortableTranslator}(x, set_instructions = FALSE, ...)

\method{format}{PortableTranslations}(
  x,
  how = c("yaml", "flat"),
  set_instructions = FALSE,
  placeholder = constant("placeholder"),
  ...
)

\method{print}{Portable}(x, ...)

\method{as_translator}{PortableTranslator}(x, set_translations_files = TRUE, ...)

\method{as_text}{PortableText}(x, ...)

\method{as_text}{Text}(x, ...)

\method{as_location}{PortableLocation}(x, ...)

\method{as_location}{Location}(x, ...)
}
\arguments{
\item{x}{Usage depends on the underlying function.
\itemize{
\item A \code{\link{Translator}} object for \code{\link[=portable_translator]{portable_translator()}}, and
\code{\link[=portable_translations]{portable_translations()}}.
\item A \code{\link{Text}} object for \code{\link[=portable_text]{portable_text()}}.
\item A \code{\link{Location}} object for \code{\link[=portable_location]{portable_location()}}.
\item Any \R object for all other functions, and methods.
}}

\item{super}{A character vector of non-empty and non-\link[base:NA]{NA} values.
Super-classes to append to the \link[=class]{class} vector of \code{x} along with
class \code{Portable}, if any. It may be empty.}

\item{tag}{A \code{NULL}, or a non-empty and non-\link[base:NA]{NA} character string.
An optional identifier for the underlying data type. See Details below.}

\item{set_translations}{A non-\link[base:NA]{NA} logical value. Should
translations be included in the resulting \code{\link[=portable]{PortableText}}
object? If \code{FALSE}, field \code{translations} is set equal to \code{NULL}.}

\item{lang}{A non-empty and non-\link[base:NA]{NA} character string. The
underlying language.

A language is usually a code (of two or three letters) for a native
language name. While users retain full control over codes, it is best
to use language codes stemming from well-known schemes such as
\href{https://en.wikipedia.org/wiki/IETF_language_tag}{IETF BCP 47}, or
\href{https://en.wikipedia.org/wiki/List_of_ISO_639_language_codes}{ISO 639-1}.
Doing so maximizes portability and cross-compatibility between packages.}

\item{placeholder}{A non-empty and non-\link[base:NA]{NA} character string.
A standard string that (textually) represents unavailable translations.}

\item{...}{Further arguments passed to or from other methods.}

\item{set_instructions}{A non-\link[base:NA]{NA} logical value. Should
instructions be included in the output? Instructions are included as a
single string containing YAML comments . These are useful when exporting
the underlying object.}

\item{how}{A character string equal to \code{"yaml"}, or \code{"flat"}. How to format
translations contained by a \code{\link[=portable]{PortableTranslations}} object.
See section Class PortableTranslations below for more information.}

\item{set_translations_files}{A non-\link[base:NA]{NA} logical value. Should
field \code{translations_files} be extracted from \code{x} and attached to the
resulting \code{\link{Translator}} object? If \code{TRUE}, it is attached
as an attribute named \code{translations_files}.}
}
\value{
\code{\link[=portable]{portable()}} returns a S3 object of class \code{\link[=portable]{Portable}}. Aside
from its updated class vector and a new \code{tag} attrribute, it is otherwise
identical to \code{x}. See above for more information.

\code{\link[=portable_translator]{portable_translator()}} returns an S3 object of class
\code{\link[=portable]{PortableTranslator}}.

\code{\link[=portable_text]{portable_text()}} returns an S3 object of class
\code{\link[=portable]{PortableText}}.

\code{\link[=portable_location]{portable_location()}} returns an S3 object of class
\code{\link[=portable]{PortableLocation}}.

\code{\link[=portable_translations]{portable_translations()}} returns an S3 object of class
\code{\link[=portable]{PortableTranslations}}.

\code{\link[=format.Portable]{format.Portable()}} returns a character string. It is a YAML representation
of \code{x}.

\code{\link[=format.PortableTranslator]{format.PortableTranslator()}} returns the same output as \code{\link[=format.Portable]{format.Portable()}}
by default. If \code{set_instructions} is \code{TRUE}, it returns a character vector
of length 2:
\enumerate{
\item a YAML string of comments, and
\item the output of \code{\link[=format.Portable]{format.Portable()}}.
}
\subsection{Outputs of \code{format.PortableTranslations()}}{

\code{\link[=format.PortableTranslations]{format.PortableTranslations()}} returns a character vector. Its length
depends on \code{set_instructions}, and \code{how}.
\enumerate{
\item If \code{how} is equal to \code{"yaml"}, it (minimally) returns the output of
\code{\link[=format.Portable]{format.Portable()}}, and this method is applied on \code{x} as a whole.
If \code{set_instructions} is \code{FALSE}, it returns a character vector of
length 2:
\enumerate{
\item a string of YAML comments, and
\item the output of \code{\link[=format.Portable]{format.Portable()}}.
}
\item If \code{how} is equal to \code{"flat"}, it returns a character vector of
length 2:
\enumerate{
\item the output of \code{\link[=format.Portable]{format.Portable()}} applied on all elements of
\code{x} except for field \code{translations}, and
\item a character string of pairs of source text and translation
constructed from field \code{translations}, and formatted according
to what section Class PortableTranslations describes.
}

If \code{set_instructions} is \code{TRUE}, it returns a character vector of
length 3. A YAML string of comments is appended to the elements listed
above (as the first element).
}

\code{\link[=print]{print()}} returns argument \code{x}, invisibly.
}
}
\description{
This help page describes all \strong{internal} mechanisms required for exporting
and importing \code{\link{Translator}} objects, \code{\link{Text}}
objects, \code{\link{Location}} objects, and underlying translations.

Portable objects are intermediaries between \code{\link{transltr}} objects
and their corresponding YAML (textual) representations. They are trivially
convertable to a YAML string using \code{\link[=format]{format()}}.
}
\details{
The \code{\link[=portable]{Portable}} family is a set of preprocessors. As such,
they return transient objects that users never actually \emph{see}. They exist
to ease bidirectional conversion processes by handling various formatting
operations. Its \code{\link[=format]{format()}} method is a wrapper to \code{\link[yaml:as.yaml]{yaml::as.yaml()}} that
enforces certain parameters and therefore, \code{\link[=print]{print()}} always outputs a YAML
string.

Portable objects can be converted back to their equivalent \emph{non-portable}
versions by using \code{\link[=as_translator]{as_translator()}}, \code{\link[=as_text]{as_text()}}, and/or \code{\link[=as_location]{as_location()}}.
The appropriate methods are used internally by \code{\link[=translator_read]{translator_read()}} (as
handlers passed to \code{\link[yaml:yaml.load]{yaml::yaml.load()}}).
\subsection{Low-level Constructor}{

\code{\link[=portable]{portable()}} is a low-level constructor for the \code{\link[=portable]{Portable}} S3
class. It does two things.
\enumerate{
\item It sets the usual \link[=class]{class} attribute, adding any \code{super}-class
if necessary.
\item It sets a \code{tag} attribute. This tag is used to identify data types
in YAML representations. See details of \code{\link[yaml:as.yaml]{yaml::as.yaml()}} for more
information.
}
}

\subsection{Constructing Portable Objects}{

Classes \code{\link{Translator}}, \code{\link{Text}}, and
\code{\link{Location}} each have a corresponding \code{\link[=portable]{Portable}}
class. Portable objects are always constructed from their \emph{non-portable}
equivalents using the appropriate \code{\link[=portable]{portable_*()}} constructor.
}
}
\note{
Methods \code{\link[=as_location.Location]{as_location.Location()}}, and \code{\link[=as_text.Text]{as_text.Text()}} are trivial
identity functions returning their argument. As such, they are never
useful. However, they are internally required by \code{\link[=translator_read]{translator_read()}}.

A \code{\link[=portable]{PortableTranslator}} object contains any number of
\code{\link[=portable]{PortableText}} objects, and these objects further contain
any number of \code{\link[=portable]{PortableLocation}} objects. Therefore,
\code{\link[=as_translator.PortableTranslator]{as_translator.PortableTranslator()}} must call \code{\link[=as_text.PortableText]{as_text.PortableText()}}
on each \code{\link[=portable]{PortableText}} object, and \code{\link[=as_text.PortableText]{as_text.PortableText()}}
must further call \code{\link[=as_location.PortableLocation]{as_location.PortableLocation()}} on each
\code{\link[=portable]{PortableLocation}} object. This follows the usual hierarchy
of \code{\link{transltr}} classes.

When using these methods as \emph{handlers} passed to \code{\link[yaml:yaml.load]{yaml::yaml.load()}},
this hierarchy is reversed. \code{\link[=portable]{PortableLocation}} objects are
converted \strong{first} via \code{\link[=as_location.PortableLocation]{as_location.PortableLocation()}}, and passed as
\code{\link{Location}} objects to the next handler,
\code{\link[=as_text.PortableText]{as_text.PortableText()}}. The latter calls \code{\link[=as_location]{as_location()}} on each
\code{\link{Location}} object, and therefore, a trivial
\code{\link[=as_location.Location]{as_location.Location()}} method is required to accomodate this reversed
process. The same is true for \code{\link{Text}} objects passed to
\code{\link[=as_translator.PortableTranslator]{as_translator.PortableTranslator()}}.

Since \code{\link[=portable]{PortableTranslator}} objects are the outer most objects,
\code{\link[=as_translator]{as_translator()}} does not require an \code{\link[=as_translator.PortableTranslator]{as_translator.PortableTranslator()}}
method.
}
\section{Class PortableTranslator}{

A \code{\link[=portable]{PortableTranslator}} object is (minimally) a named list of
length 8 containing the following elements.

\describe{
\item{\code{version}}{A non-\link[base:NA]{NA} integer value always equal to \code{1L}
until further notice. This field is reserved for future usage. It will
be used to ensure backwards compatibility and different templates.}
\item{\code{generated_by}}{A non-\link[base:NA]{NA} and non-empty character string.
What generated the underlying object.}
\item{\code{generated_on}}{See \code{\link[=utc]{utc()}}.}
\item{\code{identifier}}{See active binding \code{id} of class
\code{\link{Translator}}.}
\item{\code{hash_algorithm}}{See active binding \code{hash_algorithm} of class
\code{\link{Translator}}.}
\item{\code{source_language}}{A non-empty and non-\link[base:NA]{NA} character
string. The common source language of all registered source texts.}
\item{\code{languages}}{A named list. See active binding \code{native_languages} of
class \code{\link{Translator}} for more information.}
\item{\code{translations_files}}{A named list. File names for related
\code{\link[=portable]{PortableTranslations}} objects (one for each language
listed in \code{languages}).}
\item{\code{...}}{Further named \code{\link[=portable]{PortableText}} objects, if any.}
}
}

\section{Class PortableText}{

A \code{\link[=portable]{PortableText}} object is a named list of length 6 containing
the following elements.

\describe{
\item{\code{hash}}{See active binding \code{hash} of class \code{\link{Text}}. It is
\code{NULL} if \code{source_language} is unset.}
\item{\code{hash_algorithm}}{See active binding \code{hash_algorithm} of class
\code{\link{Text}}.}
\item{\code{source_language}}{See active binding \code{source_lang} of class
\code{\link{Text}}. It is \code{NULL} if unset.}
\item{\code{source_text}}{See active binding \code{source_text} of class
\code{\link{Text}}. It is automatically wrapped to a maximum of 80
characters per line. It is \code{NULL} if \code{source_language} is unset.}
\item{\code{translations}}{A \code{NULL}, unless \code{set_translations} is \code{TRUE}. In
that case, a named list, where elements are translations, and names are
languages. Each translation is automatically wrapped to a maximum of 80
characters per line.}
\item{\code{locations}}{See active binding \code{locations} of class
\code{\link{Text}}.}
}
}

\section{Class PortableLocation}{

A \code{\link[=portable]{PortableLocation}} is a named list of length 2 containing
the following elements.

\describe{
\item{\code{path}}{See argument \code{path} of \code{\link[=location]{location()}}.}
\item{\code{ranges}}{A character vector constructed from arguments \code{line1},
\code{col1}, \code{line2}, and \code{col2} of \code{\link[=location]{location()}}. See value \code{"long"} of
argument \code{how} of \code{\link[=format.Location]{format.Location()}} for the underlying format.}
}
}

\section{Class PortableTranslations}{

This class has no corresponding \emph{non-portable} class. It structures, and
groups source texts and translations by languages (which is preferable when
sharing translations).

A \code{\link[=portable]{PortableTranslations}} is a named list of length 5
containing the following elements.

\describe{
\item{\code{language}}{A non-empty and non-\link[base:NA]{NA} character string.
The language of the translations. See argument \code{lang} above for more
information.}
\item{\code{native_language}}{A non-empty and non-\link[base:NA]{NA} character
string. The underlying full native language name identified by
\code{language}.}
\item{\code{source_language}}{A non-empty and non-\link[base:NA]{NA} character
string. The language of the source texts. See \code{language} for more
information.}
\item{\code{source_native_language}}{A non-empty and non-\link[base:NA]{NA}
character string. The underlying full native language name identified
by \code{source_language}.}
\item{\code{translations}}{A named list. Its names are (reduced) hashes
extracted from \code{x} (the underlying \code{\link{Translator}}). Its
elements are named list of length 2 containing elements
\code{source_text}, and \code{translation}. These are character strings, or \code{NULL}
if unavailable, or unset.}
}
\subsection{Format}{

A \code{\link[=portable]{PortableTranslations}} has a dual format when \code{how} is set
equal to \code{flat}. In that case, all fields, except for \code{translations}, are
formatted as a YAML string via \code{\link[=format.Portable]{format.Portable()}}. Field \code{translations} is
formatted independently as a stream of plain text, unindented, and named
sections. The format is as follows.

\if{html}{\out{<div class="sourceCode">}}\preformatted{[[hash]]

A source text. Its hash (above) is determined automatically. The source
text and its hash must be left as is.

[[Translation]]

Its underlying translation. This will be NULL (placeholder) until someone
actually completes the section. Single line breaks are interpreted as single
spaces, like Markdown, and other text formats do. This allows translators to
avoid writing cumbersome, and unintuitive long strings.

[[hash]]

Another source text.

[[Translation]]

Another translation.

...
}\if{html}{\out{</div>}}

This stream is printed after the YAML string (which acts as a header).
}
}

\seealso{
\href{https://yaml.org/spec/1.1/}{Official YAML 1.1 specification},
\code{\link[=translator_read]{translator_read()}},
\code{\link[=translator_write]{translator_write()}},
\code{\link[=translations_read]{translations_read()}},
\code{\link[=translations_write]{translations_write()}}
}
\keyword{internal}
