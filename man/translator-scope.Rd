% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/translator.R
\name{translator_scope}
\alias{translator_scope}
\alias{translator_scope_name}
\title{Determine Scopes}
\usage{
translator_scope()

translator_scope_name(x)
}
\arguments{
\item{x}{An \R object.}
}
\value{
A character string.
}
\description{
These functions work together to determine the underlying scope of
a call to \code{\link[=translator_set]{translator_set()}}, \code{\link[=translator_get]{translator_get()}}, or \code{\link[=translate]{translate()}}.
}
\details{
\code{\link[=translator_scope_name]{translator_scope_name()}} constructs scope names from \R objects.
\itemize{
\item It returns \code{x} as is if it is a character string.
\item It returns the \link[=environmentName]{name} of \code{x} if it is an environment.
\item It returns the \link[=environmentName]{name} of the enclosure of \code{x} if it
is a \link{function}.
\item It returns \code{"global"} for any other value passed to \code{x}.
}

Empty outputs are always replaced by the default scope (\code{global}).

\code{\link[=translator_scope]{translator_scope()}} is used to infer scopes by inspecting the call stack.
It is called by \code{\link[=translator_set]{translator_set()}}, \code{\link[=translator_get]{translator_get()}}, and \code{\link[=translate]{translate()}}.
\R call stacks can be surprisingly complex, and in some non-standard
situations, \code{\link{transltr}} may fail to infer a scope.
}
\note{
Developers should absolutely read code comments of these functions before
iterating on them.
}
\seealso{
\code{\link[=sys.nframe]{sys.nframe()}},
\code{\link[=sys.function]{sys.function()}},
\code{\link[=translator_set]{translator_set()}},
\code{\link[=translator_get]{translator_get()}},
\code{\link[=translate]{translate()}}
}
\keyword{internal}
