% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/constants.R
\name{constant}
\alias{constant}
\title{Internal Constants}
\usage{
constant(which = "")
}
\arguments{
\item{which}{A non-empty and non-\link[base:NA]{NA} character string. The name
of the constant to fetch.}
}
\value{
\code{\link[=constant]{constant()}} returns the requested constant, or \code{NULL} if it is unavailable.
See Examples below.
}
\description{
Fetch a constant used by \code{\link{transltr}}. Constants ensure
consistency among all features of the package.
}
\section{Hashing Algorithms}{

Hashing algorithms map an arbitrary character string to a shorter string of
hexadecimal characters. It typically has a fixed width and is highly likely
to be unique. Available methods are listed by \code{constant("algorithms")}.
\subsection{Secure Hash Algorithm 1}{

Method \code{sha1} corresponds to SHA-1 (Secure Hash Algorithm version 1), a
cryptographic hashing function. While it is now superseded by more secure
variants (SHA-256, SHA-512, etc.), it is still useful for non-sensitive
purposes. It is fast, collision-resistant, and may handle very large inputs.
It emits strings of 40 hexadecimal characters.
}

\subsection{Cumulative UTF-8 Sum}{

\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}

\strong{This method is experimental. Use with caution.}

Method \code{utf8} is a simple method derived from cumulative sums of UTF-8 code
points (converted to integers). It is slightly faster than method \code{sha1} for
small inputs, and emits hashes with a width porportional to the underlying
input's length.

Strictly speaking, this method is not a hashing algorithm per se. Instead,
it should be viewed as an identification algorithm that is highly likely to
produce different values for different inputs.
}
}

\examples{
transltr:::constant("algorithms")    ## Outputs c("sha1", "utf8")
transltr:::constant("concat")        ## Outputs " "
transltr:::constant("empty")         ## Outputs "<empty>"
transltr:::constant("null")          ## Outputs "<null>"
transltr:::constant("unset")         ## Outputs "<unset>"
transltr:::constant("unknown")       ## Outputs "<unknown>"
transltr:::constant("untranslated")  ## Outputs "# Erase this comment and provide a translation."

# NULL is returned if which has no corresponding entry.
transltr:::constant("__undefined__")

}
\keyword{internal}
