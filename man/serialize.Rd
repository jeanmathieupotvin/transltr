% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/serialize.R
\name{serialize}
\alias{serialize}
\alias{ExportedTranslator}
\alias{ExportedText}
\alias{ExportedLocation}
\alias{ExportedTranslations}
\alias{serialize_translations}
\alias{deserialize}
\alias{deserialize_translations}
\alias{export}
\alias{export_translations}
\alias{import}
\alias{validate}
\alias{export.Translator}
\alias{export.Text}
\alias{export.Location}
\alias{import.ExportedTranslator}
\alias{import.ExportedText}
\alias{import.ExportedLocation}
\alias{import.ExportedTranslations}
\alias{import.default}
\alias{validate.ExportedTranslator}
\alias{validate.ExportedText}
\alias{validate.ExportedLocation}
\alias{validate.default}
\alias{translations_files}
\alias{get_uuid}
\title{Serialize Objects}
\usage{
serialize(x, ...)

serialize_translations(tr = translator(), lang = "", set_uuid = TRUE)

deserialize(string = "")

deserialize_translations(string = "", tr)

export(x, ...)

export_translations(tr = translator(), lang = "", set_uuid = TRUE)

import(x, ...)

validate(x, ...)

\method{export}{Translator}(x, set_uuid = TRUE, parent_dir, ...)

\method{export}{Text}(x, set_uuid = TRUE, set_translations = FALSE, ...)

\method{export}{Location}(x, set_uuid = TRUE, ...)

\method{import}{ExportedTranslator}(x, ...)

\method{import}{ExportedText}(x, ...)

\method{import}{ExportedLocation}(x, ...)

\method{import}{ExportedTranslations}(x, tr, ...)

\method{import}{default}(x, ...)

\method{validate}{ExportedTranslator}(x, ...)

\method{validate}{ExportedText}(x, ...)

\method{validate}{ExportedLocation}(x, ...)

\method{validate}{default}(x, ...)

translations_files(tr = translator(), parent_dir)

get_uuid(x)
}
\arguments{
\item{x}{Any \R object.}

\item{...}{Further arguments passed to, or from other methods.}

\item{tr}{A \code{\link{Translator}} object.

This argument is \strong{optional} for \code{\link[=deserialize_translations]{deserialize_translations()}}, and
\code{\link[=import.ExportedTranslations]{import.ExportedTranslations()}}. It allows a \code{\link{Translator}}
object to register imported translations as long as they correspond to
an existing source text (a registered \code{\link{Text}} object).}

\item{lang}{A non-empty and non-\link[base:NA]{NA} character string. The
underlying language.

A language is usually a code (of two or three letters) for a native
language name. While users retain full control over codes, it is best
to use language codes stemming from well-known schemes such as
\href{https://en.wikipedia.org/wiki/IETF_language_tag}{IETF BCP 47}, or
\href{https://en.wikipedia.org/wiki/List_of_ISO_639_language_codes}{ISO 639-1}
to maximize portability and cross-compatibility.}

\item{set_uuid}{A non-\link[base:NA]{NA} logical value. Should a \verb{_Uuid} field
uniquely identifying outputs of \code{\link[=export]{export()}} be included? If \code{TRUE}, it is
set equal to \code{\link[=uuid]{uuid()}}. This field is required by \code{\link[=validate]{validate()}} to throw
meaningful error messagesÂ­.}

\item{string}{A non-empty and non-\link[base:NA]{NA} character string. Contents
to deserialize.}

\item{parent_dir}{An \strong{optional} non-\link[base:NA]{NA} character string. It
can be empty. The parent directory to use when creating entries of field
\verb{Translations Files} of an \code{\link[=export]{ExportedTranslator}} object. See
\code{\link[=translator_write]{translator_write()}} for more information. Empty values are converted to
the root location (\code{/}) by \code{\link[=file.path]{file.path()}}.}

\item{set_translations}{A non-\link[base:NA]{NA} logical value. Should
translations be included in the resulting \code{\link[=export]{ExportedText}}
object? If \code{FALSE}, field \code{Translations} is set equal to \code{NULL}.}
}
\value{
\code{\link[=serialize]{serialize()}} and \code{\link[=serialize_translations]{serialize_translations()}} return a character string:
a \href{https://yaml.org/spec/1.1/}{YAML} string, and a \link[=flat_serialize]{FLAT}
string, respectively.

\code{\link[=export]{export()}} returns a named list of S3 class
\itemize{
\item \code{\link[=export]{ExportedTranslator}} if \code{x} is a \code{\link{Translator}}
object,
\item \code{\link[=export]{ExportedText}} if \code{x} is a \code{\link{Text}} object, or
\item \code{\link[=export]{ExportedLocation}} if \code{x} is a \code{\link{Location}} object.
}

See Details above for more information.

\code{\link[=export_translations]{export_translations()}} returns a named list of S3 class
\code{\link[=export]{ExportedTranslations}} containing the following elements.

\describe{
\item{\verb{_Uuid}}{A non-empty and non-\link[base:NA]{NA} character
string if \code{set_uuid} is \code{TRUE}. A
\href{https://en.wikipedia.org/wiki/Universally_unique_identifier}{universally unique identifier}
used to throw suitable error messages. It should be ignored by users.}
\item{\code{Identifier}}{The unique identifier of \code{x}. See
\code{\link[=Translator]{Translator$id}} for more information.}
\item{\verb{Language Code}}{The value of \code{lang}.}
\item{\code{Language}}{The target (native) language. See
\code{\link[=Translator]{Translator$native_languages}} for more information.}
\item{\verb{Source Language}}{The source language. See
\code{\link[=Translator]{Translator$source_langs}} for more information.}
\item{\code{Translations}}{A named list containing further named lists. Each
sublist contains two values:
\describe{
\item{\verb{Source Text}}{A non-empty and non-\link[base:NA]{NA} character
string.}
\item{\code{Translation}}{A non-empty and non-\link[base:NA]{NA} character
string, or \code{NULL} if unavailable.}
}
See \code{\link[=Text]{Text$translations}} for more information. Their names are
(reduced) hashes extracted from \code{x}.}
}

\code{\link[=deserialize]{deserialize()}} and \code{\link[=import]{import()}} returns
\itemize{
\item a \code{\link{Translator}} object if \code{x} is an
\code{\link[=export]{ExportedTranslator}} object,
\item a \code{\link{Text}} object if \code{x} is an \code{\link[=export]{ExportedText}} object,
\item a \code{\link{Location}} object if \code{x} an \code{\link[=export]{ExportedLocation}}
object.
}

\code{\link[=import.ExportedTranslator]{import.ExportedTranslator()}} further sets a \code{translations_files} attribute
holding the cached value of \verb{x$Translations Files}.

\code{\link[=deserialize_translations]{deserialize_translations()}} and \code{\link[=import.ExportedTranslations]{import.ExportedTranslations()}} return an
\code{\link[=export]{ExportedTranslations}} object. Its contents is reformatted, if
necessary.
\itemize{
\item \code{\link[=import.ExportedTranslations]{import.ExportedTranslations()}} further registers imported translations
if a \code{\link{Translator}} object is passed to itself, or to
\code{\link[=deserialize_translations]{deserialize_translations()}}. Translations must correspond to an existing
source text (a registered \code{\link{Text}} object). Otherwise, they are
skipped silently. The \code{\link{Translator}} object is updated
\strong{by reference} and is not returned (\code{\link{Translator}} objects
are \link{environments}).
}

\code{\link[=import.default]{import.default()}} is used for its side-effect of throwing an error for
unsupported objects.

\code{\link[=validate]{validate()}} returns \code{x} if it is valid and throws an error otherwise. It
is designed to fail fast: error messages are \strong{not accumulated}. Classes
(and underlying objects) that does not have a \code{\link[=validate]{validate()}} method are
considered to be valid by default.

Therefore, \code{\link[=validate.default]{validate.default()}} simply returns \code{x} like \code{\link[=identity]{identity()}} would.

\code{\link[=translations_files]{translations_files()}} returns a named list.
\itemize{
\item If \code{tr} has a valid \code{translations_files} attribute (a non-empty named
list), it is returned. See \code{\link[=import.ExportedTranslator]{import.ExportedTranslator()}} for more
information.
\item Otherwise, a named list of file paths is constructed from
\code{tr$native_languages} (the source language is ignored).
See \code{\link[=Translator]{Translator$native_languages}} for more information.
}

\code{\link[=get_uuid]{get_uuid()}} safely extracts field \verb{_Uuid} from \code{x}, and returns it if the
underlying value is a non-empty and non-\link[base:NA]{NA} character string.
Otherwise, a default value is returned.
}
\description{
Convert \code{\link{Translator}} objects, \code{\link{Text}} objects, and
\code{\link{Location}} objects to a \link[yaml:as.yaml]{YAML} object, or
vice-versa.

Convert translations contained by a \code{\link{Translator}} object to
a custom textual representation (a \link[=flat_serialize]{FLAT} object), or
vive-versa.
}
\details{
The information contained within a \code{\link{Translator}} object is
split by default. Unless \code{set_translations} is \code{TRUE}, translations are
serialized independently from other fields. This is useful when creating
\link[=translator_write]{Exported Translator files}, and
\link[=translations_read]{Exported Translations files}.

While \code{\link[=serialize]{serialize()}} and \code{\link[=serialize_translations]{serialize_translations()}} are distinct, they share
a common \emph{design}, and perform the same \emph{thing}, at least conceptually. The
same is true for \code{\link[=deserialize]{deserialize()}}, and \code{\link[=deserialize_translations]{deserialize_translations()}}.
\subsection{Serialization}{

The data serialization process performed by \code{\link[=serialize]{serialize()}} and
\code{\link[=serialize_translations]{serialize_translations()}} is internally broken down into 2 steps: objects
are first \emph{exported} before being \emph{serialized}.

\code{\link[=export]{export()}} and \code{\link[=export_translations]{export_translations()}} are \emph{preserializers} that convert
objects into \emph{transient} objects of class \code{\link[=export]{Exported*}}. Their
sole purpose is to ease the conversion of environments to textual
representations (\code{\link{Translator}} objects and \code{\link{Text}}
objects are stored as environments internally). They are never returned to
the user: \code{\link[=serialize]{serialize()}} and \code{\link[=serialize_translations]{serialize_translations()}} immediately transform
them into suitable character strings. The latter outputs a
\link[=flat_serialize]{FLAT object}, and the former, a
\link[yaml:as.yaml]{YAML object}.
}

\subsection{Deserialization}{

The data deserialization process performed by \code{\link[=deserialize]{deserialize()}} and
\code{\link[=deserialize_translations]{deserialize_translations()}} is internally broken down into 3 steps: objects
are first \emph{deserialized}, then \emph{validated}, and finally, \emph{imported}.

\code{\link[=deserialize]{deserialize()}}, and \code{\link[=deserialize_translations]{deserialize_translations()}} first deserializes \code{string}
into an \R named list that is \strong{presumed} to be an object of class
\code{\link[=export]{Exported*}}. The former relies on underlying
\href{https://yaml.org/spec/1.1/#id858600}{YAML tags} to make such assumptions.
The contents of the resulting \emph{transient} object is then thoroughly checked
with \code{\link[=validate]{validate()}}, which dispatches on the object's \strong{presumed} class.
Finally, a valid object is \emph{imported} back into an appropriate \R object
via \code{\link[=import]{import()}}.
}

\subsection{\code{Exported} Classes}{

\code{\link[=export]{Exported*}} may refer to classes
\code{\link[=export]{ExportedTranslator}},
\code{\link[=export]{ExportedText}},
\code{\link[=export]{ExportedLocation}}, and
\code{\link[=export]{ExportedTranslations}}.

Generally speaking, an \code{\link[=export]{Exported*}} object is a named list of S3
class \code{\link[=export]{Exported*}} always having a \code{tag} attribute whose value is
equal to the super-class of argument \code{x}. The exact class depends on \code{x}.
\code{\link[=export]{Exported*}} objects can be converted back to equivalent \R
objects via \code{\link[=import]{import()}}.

There are three main differences between an object and its \emph{exported}
counterpart.
\enumerate{
\item field names are written as whole (human-readable) words,
\item source text is treated independently from translations, and
\item unset fields are set equal to \code{NULL} (a \code{~} in YAML).
}

The information is otherwise identical, albeit structured differently for
presentational purposes.
}

\subsection{The \code{ExportedTranslations} Super-class}{

\code{\link[=export_translations]{export_translations()}} is different because it returns an object of S3 class
\code{\link[=export]{ExportedTranslations}} which has no \emph{unexported} counterpart.
Its purpose is to restructure translations extracted from a
\code{\link{Translator}} object by language. It is used to create
\link[=translations_read]{Exported Translations file}.

\code{\link[=export]{ExportedTranslations}} objects are created from a
\code{\link{Translator}} object. The value passed to \code{lang} must have a
corresponding registered native language name. See
\code{\link[=Translator]{Translator$native_languages}} for more information.

Unavailable translations are automatically replaced by a placeholder.
}
}
\examples{
# Set source language.
language_source_set("en")

# Create Location, Text, and Translator objects.
loc <- location("file-a", 1L, 2L, 3L, 4L)

txt <- text(
  location("a", 1L, 2L, 3L, 4L),
  en = "Hello, world!",
  fr = "Bonjour, monde!",
  es = "Â¡Hola, mundo!")

tr <- translator(
  id = "test-translator",
  en = "English",
  es = "EspaÃ±ol",
  fr = "FranÃ§ais",
  text(
    location("a", 1L, 2L, 3L, 4L),
    en = "Hello, world!",
    fr = "Bonjour, monde!"),
  text(
    location("b", 1L, 2L, 3L, 4L),
    en = "Farewell, world!",
    fr = "Au revoir, monde!"))

# Serialize objects. This is what translator_write(),
# and translations_write() call internally.
serialize(loc)
serialize(txt)
serialize(tr)
serialize_translations(tr, "fr")
serialize_translations(tr, "es")

# serialize(), and serialize_translations() both call export() internally.
# Field `_Uuid` can be omitted by setting set_uuid equal to `FALSE`.
export(loc, set_uuid = FALSE)
export(txt)
export(tr)
export_translations(tr, "fr")
export_translations(tr, "es", set_uuid = FALSE)

# Translations can be exported along with original objects.
# This is not the default behavior of the package.
export(txt, set_translations = TRUE)
export(tr,  set_translations = TRUE)

# Deserialize objects. This is what translator_read(), and
# translations_read() call internally.
deserialize(serialize(loc))
deserialize(serialize(txt))
deserialize(serialize(tr))
deserialize_translations(serialize_translations(tr, "fr"))
deserialize_translations(serialize_translations(tr, "es"))

# deserialize(), and deserialize_translations() both call validate()
# internally. validate() checks that the underlying input can safely be
# passed to import(). What deserialization functions internally passes to
# validate() are candidate 'Exported' objects that may, or may not be valid.
validate(export(loc))
validate(export(txt))
validate(export(tr))
validate(export_translations(tr, "fr"))

# Introduce an error in an ExportedLocation object for illustration purposes.
# validate() uses field `_Uuid` to throw meaningful error messages.
loc_err <- export(loc)
loc_err$Path <- 1L

\dontrun{validate(loc_err)}

# deserialize(), and deserialize_translations() both call import() on valid
# Exported* objects. Any `_Uuid` field is discarded by import().
import(export(loc))
import(export(txt))
import(export(tr))
import(export_translations(tr, "fr"))
import(export_translations(tr, "es"))

# import() is the conceptual inverse of export(). However, this is not
# quite true for import.ExportedTranslations(), because it replaces any
# previous placeholders stemming from export_translations() with another
# placeholder (for internal consistency).
cat(serialize_translations(tr, "es"), "\n")
deserialize_translations(serialize_translations(tr, "es"))

# A Translator object may be passed to deserialize_translations(), and
# import.ExportedTranslations(). It accumulates translations, and is
# modified in place (it is not returned). Note that translations are
# registered only if they correspond to an existing source text, and
# are skipped otherwise.
tr_new <- Translator$new(id = "test-translator")
tr_new$set_text(en = "Hello, world!")
tr_new$set_text(en = "Farewell, world!")
deserialize_translations(serialize_translations(tr, "fr")) , tr_new)

# translations_files() is used to create the 'Translations Files' field
# of an ExportedTranslator object.
translations_files(tr)
translations_files(tr, getwd())

# It is also used to fetch internal attribute `translations_files` set by
# import.ExportedTranslator().
translations_files(import(export(tr)))

get_uuid(export(loc))  ## Outputs the current uuid
get_uuid(1L)           ## Outputs "<unkwnown>"

}
\seealso{
\href{https://yaml.org/spec/1.1/}{Official YAML 1.1 specification},
\code{\link[yaml:as.yaml]{yaml::as.yaml()}},
\code{\link[yaml:yaml.load]{yaml::yaml.load()}},
\code{\link[=flat_serialize]{flat_serialize()}},
\code{\link[=flat_deserialize]{flat_deserialize()}},
\code{\link[=translator_read]{translator_read()}},
\code{\link[=translator_write]{translator_write()}},
\code{\link[=translations_read]{translations_read()}},
\code{\link[=translations_write]{translations_write()}}
}
\keyword{internal}
