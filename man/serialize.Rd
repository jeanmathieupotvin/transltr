% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/serialize.R
\name{serialize}
\alias{serialize}
\alias{export}
\alias{Exported}
\alias{ExportedTranslator}
\alias{ExportedText}
\alias{ExportedLocation}
\alias{ExportedTranslations}
\alias{import}
\alias{export_translations}
\alias{export.Translator}
\alias{export.Text}
\alias{export.Location}
\alias{import.ExportedTranslator}
\alias{import.ExportedText}
\alias{import.ExportedLocation}
\alias{import.default}
\alias{format.Exported}
\alias{format.ExportedTranslator}
\alias{format.ExportedTranslations}
\alias{print.Exported}
\title{Serialize Objects}
\usage{
export(x, ...)

import(x, ...)

export_translations(x = translator(), ...)

\method{export}{Translator}(x, ...)

\method{export}{Text}(x, set_translations = FALSE, ...)

\method{export}{Location}(x, ...)

\method{import}{ExportedTranslator}(x, ...)

\method{import}{ExportedText}(x, ...)

\method{import}{ExportedLocation}(x, ...)

\method{import}{default}(x, ...)

\method{format}{Exported}(x, ...)

\method{format}{ExportedTranslator}(x, ...)

\method{format}{ExportedTranslations}(x, ...)

\method{print}{Exported}(x, ...)
}
\arguments{
\item{x}{Any \R object. A \code{\link{Translator}} object, or an
\code{\link[=export]{ExportedTranslator}} object for \code{\link[=export_translations]{export_translations()}}.}

\item{...}{Further arguments passed to or from other methods.}

\item{set_translations}{A non-\link[base:NA]{NA} logical value. Should
translations be included in the resulting \code{\link[=export]{ExportedText}}
object? If \code{FALSE}, field \code{Translations} is set equal to \code{NULL}.}
}
\value{
\code{\link[=export]{export()}} return a named list of S3 class \code{\link[=export]{Exported}} and
super-class
\itemize{
\item \code{\link[=export]{ExportedTranslator}} if \code{x} is a \code{\link{Translator}} object,
\item \code{\link[=export]{ExportedText}} if \code{x} is a \code{\link{Text}} object, or
\item \code{\link[=export]{ExportedLocation}} if \code{x} is a \code{\link{Location}} object.
}

\code{\link[=import]{import()}} returns
\itemize{
\item a \code{\link{Translator}} object if \code{x} is an \code{\link[=export]{ExportedTranslator}} object,
\item a \code{\link{Text}} object if \code{x} is an \code{\link[=export]{ExportedText}} object,
\item a \code{\link{Location}} object if \code{x} an \code{\link[=export]{ExportedLocation}} object, or
\item the value passed to \code{x} as is otherwise (the default method).
}

\code{\link[=export_translations]{export_translations()}} returns a named list containing further named lists
of S3 class \code{\link[=export]{ExportedTranslations}} and of length 5. Each one
contains the following elements.

\describe{
\item{\code{Language}}{A non-empty and non-\link[base:NA]{NA} character string.
The underlying translations' target language.}
\item{\verb{Native Language}}{A non-empty and non-\link[base:NA]{NA} character
string. The full native language name of the target language.}
\item{\verb{Source Language}}{A non-empty and non-\link[base:NA]{NA} character
string. The underlying source code's language.}
\item{\verb{Source Native Language}}{A non-empty and non-\link[base:NA]{NA}
character string. The full native language name of the source language.}
\item{\code{Translations}}{A named list containing further named lists. Each
sublist contains two values:
\describe{
\item{\verb{Source Text}}{A non-empty and non-\link[base:NA]{NA} character
string.}
\item{\code{Translation}}{A non-empty and non-\link[base:NA]{NA} character string,
or \code{NULL} if unavailable.}
}
Their names represent (reduced) hashes extracted from \code{x}.}
}

\code{\link[=format]{format()}} returns a named character vector. Its length and contents depend
on the underlying method.
\itemize{
\item \code{\link[=format.Exported]{format.Exported()}} returns a character string, a YAML serialization \code{x}.
\item \code{\link[=format.ExportedTranslator]{format.ExportedTranslator()}} returns a character vector of length 2 and
containing the following elements.

\describe{
\item{\code{instructions}}{A character string. A set of YAML comments.}
\item{\code{translator}}{A character string. The YAML serialization of \code{x}.}
}
\item \code{\link[=format.ExportedTranslations]{format.ExportedTranslations()}} returns a character vector of length 3
containing the following elements.

\describe{
\item{\code{instructions}}{A character string. A set of YAML comments.}
\item{\code{languages}}{A character string. A YAML collection containing
basic information on source and target languages.}
\item{\code{translations}}{A character string. Pairs of source text and
translations formatted as \emph{flat} sections. See above.}
}
}

\code{\link[=print]{print()}} returns argument \code{x}, invisibly.
}
\description{
Convert \code{\link{Translator}} objects, \code{\link{Text}} objects, and
\code{\link{Location}} objects to a \href{https://yaml.org/spec/1.1/}{YAML}
string.

Convert translations contained by a \code{\link{Translator}} object into
a plain text and \emph{flat} format that is easy to use and understand.
}
\details{
The data serialization process is broken down in 2 steps: \code{\link[=export]{export()}},
and \code{\link[=format]{format()}}.

\code{\link[=export]{export()}} converts objects into \emph{transient} objects of class
\code{\link[=export]{Exported}}. These are trivially convertable to an equivalent
YAML data structure via \code{\link[=format]{format()}}. They are \emph{transient} because they are
always formatted immediately after being created. As such, \code{\link[=export]{export()}} can
be viewed as a preprocessor, and \code{\link[=format]{format()}} as the \emph{true} serializer.

\code{\link[=export]{Exported}} objects can be converted back to equivalent \R
objects via \code{\link[=import]{import()}}.
\subsection{The Exported Base Class}{

Generally speaking, an \code{\link[=export]{Exported}} object is a named list of S3
class \code{\link[=export]{Exported}} always having a \code{tag} attribute whose value is
equal to the super-class of argument \code{x}.

Classes \code{\link{Translator}}, \code{\link{Text}}, and
\code{\link{Location}} each have a matching \code{\link[=export]{Exported}}
super-class: \code{\link[=export]{ExportedTranslator}}, \code{\link[=export]{ExportedText}},
and \code{\link[=export]{ExportedLocation}}. There are three main differences between
both sets:
\enumerate{
\item field names are written as whole (human-readable) words,
\item source text is treated independently from translations, and
\item unset fields are set equal to \code{NULL} (a \code{~} in YAML).
}

The information is otherwise identical, albeit structured slightly
differently.
}

\subsection{The ExportedTranslations Super-Class}{

This class restructures translations by languages. Unlike other
\code{\link[=export]{Exported}} super-classes, it has no corresponding
\emph{non-exported} class. Objects of this class are created by applying
\code{\link[=export_translations]{export_translations()}} on a \code{\link{Translator}} object.

Objects of this class are used to create
\emph{\link[=translations_read]{Portable Translations File}}.
\subsection{Format}{

An \code{\link[=export]{ExportedTranslations}} has a dual format. Fields \code{Language},
\verb{Native Language}, \verb{Source Language}, and \verb{Source Native Language} are
serialized as a YAML string. However, field \code{Translations} is formatted
separately as a \emph{flat} string: a sequence of plain text, and unindented
sections. The example below highlights both formats.

\if{html}{\out{<div class="sourceCode">}}\preformatted{\%YAML 1.1
---
!<Translations>
Language: fr
Native Language: Fran√ßais
Source Language: en
Source Native Language: English

[[hash]]

The source text is inserted here. Its hash is determined automatically.
They both must be left as is.

[[Translation]]

The translation, or a placeholder equal to '<none>'. It must be removed
before completing the section.

Single line breaks are interpreted as single spaces, like other popular
text formats. This avoids writing, and working with cumbersome long strings.
}\if{html}{\out{</div>}}
}

}
}
\note{
The rationale behind \code{\link[=export.default]{export.default()}} is that any \R type, or class that
does not have a dedicated \code{\link[=import]{import()}} method should be considered \emph{imported}
already. This is useful when \link[=apply]{applying} \code{\link[=import]{import()}} on many objects
having different classes.
}
\seealso{
\href{https://yaml.org/spec/1.1/}{Official YAML 1.1 specification},
\code{\link[=translator_read]{translator_read()}},
\code{\link[=translator_write]{translator_write()}},
\code{\link[=translations_read]{translations_read()}},
\code{\link[=translations_write]{translations_write()}}
}
\keyword{internal}
