% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils-map.R
\name{vapply_1l}
\alias{vapply_1l}
\alias{vapply_1i}
\alias{vapply_1c}
\alias{map}
\title{Apply Wrappers}
\usage{
vapply_1l(x, fun, ...)

vapply_1i(x, fun, ...)

vapply_1c(x, fun, ...)

map(fun, ..., more = list())
}
\arguments{
\item{x}{See argument \code{X} of \code{\link[base:lapply]{vapply()}}.}

\item{fun}{See argument \code{FUN} of \code{\link[base:lapply]{vapply()}}, and
\code{\link[=.mapply]{.mapply()}}.}

\item{...}{Further optional arguments passed to \code{fun}.}

\item{more}{See argument \code{MoreArgs} of \code{\link[=.mapply]{.mapply()}}.}
}
\value{
\code{\link[=vapply_1l]{vapply_1l()}},
\code{\link[=vapply_1l]{vapply_1l()}}, and
\code{\link[=vapply_1c]{vapply_1c()}} respectively return a logical, an integer, and a character
vector having the same length as \code{x}. Names are always discarded.

\code{\link[=map]{map()}} returns a list having the same length as the longest element passed
to  \code{...}.
}
\description{
These functions wrap a function of the \code{\link[base:lapply]{apply()}}
family, and enforce various values for convenience. Arguments are
passed \emph{as is} to an \code{\link[base:lapply]{apply()}} function.
}
\examples{
# is.integer(), as.integer(), and as.character() are already
# vectorized by default. This is only for illustration purposes.
transltr:::vapply_1l(list(1L, 2L, 3L), is.integer)
transltr:::vapply_1i(list(1.1, 2.2, 3.3), as.integer)
transltr:::vapply_1c(list(1L, 2L, 3L), as.character)

x <- transltr:::map(rep, c(1L, 2L, 3L), c(3L, 2L, 1L))
identical(x, list(c(1L, 1L, 1L), c(2L, 2L), 3L))

}
\seealso{
Other utility functions: 
\code{\link{format_vector}()},
\code{\link{stops}()},
\code{\link{to_string}()}
}
\concept{utility functions}
\keyword{internal}
