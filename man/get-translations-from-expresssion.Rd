% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get-translations-from-expression.R
\name{getTranslationsFromExpression}
\alias{getTranslationsFromExpression}
\alias{.getStringFromTranslateCall}
\alias{.getStringId}
\alias{.isTranslateCall}
\alias{.isImplicitTranslateCall}
\alias{.isExplicitTranslateCall}
\title{Find translations in an expression}
\usage{
getTranslationsFromExpression(expr = expression())

.getStringFromTranslateCall(call, env)

.getStringId(string = character(1L))

.isTranslateCall(x)

.isImplicitTranslateCall(x)

.isExplicitTranslateCall(x)
}
\arguments{
\item{expr}{an \link[base:expression]{expression}.}

\item{call}{a \link[base:call]{call} to \code{\link[=translate]{translate()}} or to the double
colon operator (\code{::}). For the latter, arguments \code{pkg} and \code{name}
must respectively be set equal to \code{transltr} and \code{translate}.}

\item{env}{an \link[base:environment]{environment}.}

\item{x}{an \R object to be tested.}
}
\value{
\itemize{
\item \code{\link[=getTranslationsFromExpression]{getTranslationsFromExpression()}} returns a named list (possibly empty).
Elements are also named lists containing 2 elements: extracted \code{string}
and its \code{id}. Names of the \emph{outer} list match \code{id} values.
\item \code{\link[=.getStringFromTranslateCall]{.getStringFromTranslateCall()}} returns \code{env} invisibly and assigns
a new value to it if applicable. Its name is given by \code{\link[=.getStringId]{.getStringId()}}.
\item \code{\link[=.getStringId]{.getStringId()}} returns a string of 32 hexadecimal characters. It
corresponds to a BLAKE2b hash of 16 bytes generated by \code{\link[sodium:hash]{sodium::hash()}}.
\item \code{\link[=.isTranslateCall]{.isTranslateCall()}},
\code{\link[=.isImplicitTranslateCall]{.isImplicitTranslateCall()}}, and
\code{\link[=.isExplicitTranslateCall]{.isExplicitTranslateCall()}} all return \code{TRUE} if \code{call} is a
\link[base:call]{call} to \code{\link[=translate]{translate()}} and \code{FALSE} othwerwise.
See Details and Examples for more information.
}
}
\description{
Find and extract strings to be translated at runtime and passed to
\code{\link[=translate]{translate()}} in an \link[base:expression]{expression} vector. Strings
are automatically concatenated together before being returned.

Functions below are considered low-level and should not be used by end
users. This documentation is intended for developers.
}
\details{
\code{\link[=getTranslationsFromExpression]{getTranslationsFromExpression()}} is the internal \emph{main} mechanism. All
other functions here are helper functions called by the former.

Each extracted string is uniquely identified by a string created by
\code{\link[=.getStringId]{.getStringId()}}. Identifiers are considered to be collision-resistant.
\subsection{Implicit and explicit calls}{

An \link[base:expression]{expression} may contain \link[base:call]{call} object(s):
a \link[base:mode]{mode} representing an unevaluated function expression applied
to the given arguments.

\code{\link[=.isTranslateCall]{.isTranslateCall()}} detects \link{calls} made to \code{\link[=translate]{translate()}}. There are two
possibilities. A call that depends on the \link[base:search]{search} path is
said to be \emph{implicit}. A call that directly refers this package it is said
to be \emph{explicit}.

\if{html}{\out{<div class="sourceCode">}}\preformatted{translate("hello, world!")                 # implicit
cat(translate("hello, world!"))            # implicit
transltr::translate("hello, world!")       # explicit
cat(transtlr::translate("hello, world!"))  # explicit
}\if{html}{\out{</div>}}

Implicit calls to \code{\link[=translate]{translate()}} are discouraged because they are considered
to be a bad coding practice.
}
}
\note{
The author was inspired by the source code of \code{\link[tools:xgettext]{tools::xgettext()}}.
This function convinced him to redesign the previous iteration of
\code{\link[=getTranslationsFromExpression]{getTranslationsFromExpression()}} (which no longer exists). Many
thanks to the \emph{original author} and \verb{R Core Team}.
}
\examples{
implicitCall <- call("translate", "hello, world!")
explicitCall <- str2lang("transltr::translate(\"hello, world!\")")

.isTranslateCall(implicitCall)          # TRUE
.isTranslateCall(explicitCall)          # TRUE

.isImplicitTranslateCall(implicitCall)  # TRUE
.isImplicitTranslateCall(explicitCall)  # FALSE

.isExplicitTranslateCall(implicitCall)  # FALSE
.isExplicitTranslateCall(explicitCall)  # TRUE

expr1 <- str2lang("transltr::translate(\"hello, \", \"world!\", lang = \"en\")")
getTranslationsFromExpression(expr1)

expr2 <- str2lang("translate(\"hello, \", \"world!\")")
getTranslationsFromExpression(expr2)

identical(.getStringId("hello, world!"), "fcb655f3a969048c07294cfa7ef53af4")

}
\seealso{
\code{\link[sodium:hash]{sodium::hash()}}

\code{\link[tools:xgettext]{tools::xgettext()}}
}
\author{
Jean-Mathieu Potvin (\href{mailto:jeanmathieupotvin@ununoctium.dev}{jeanmathieupotvin@ununoctium.dev})
}
\keyword{internal}
