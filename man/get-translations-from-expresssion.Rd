% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get-translations-from-expression.R
\name{getTranslationsFromExpression}
\alias{getTranslationsFromExpression}
\alias{getStringFromTranslateCall}
\alias{getStringId}
\alias{isTranslateCall}
\title{Find translations in an expression}
\usage{
getTranslationsFromExpression(expr = expression())

getStringFromTranslateCall(call, env = new.env())

getStringId(string = character(1L))

isTranslateCall(x)
}
\arguments{
\item{expr}{an \link[base:expression]{expression}.}

\item{call}{a \link[base:call]{call} to \code{\link[=translate]{translate()}} or to the double
colon operator (\code{::}). For the latter, arguments \code{pkg} and \code{name}
must respectively be set equal to \code{transltr} and \code{translate}.}

\item{env}{an \link[base:environment]{environment}.}

\item{x}{an \R object to be tested.}
}
\value{
\itemize{
\item \code{\link[=getTranslationsFromExpression]{getTranslationsFromExpression()}} returns a named list (possibly empty).
Elements are also named lists containing 2 elements: extracted \code{string}
and its \code{id}. Names of the \emph{outer} list match \code{id} values.
\item \code{\link[=getStringFromTranslateCall]{getStringFromTranslateCall()}} returns \code{env} invisibly and assigns
a new value to it if applicable. Its name is given by \code{\link[=getStringId]{getStringId()}}.
\item \code{\link[=getStringId]{getStringId()}} returns a string of 32 hexadecimal characters. It
corresponds to a BLAKE2b hash of 16 bytes generated by \code{\link[sodium:hash]{sodium::hash()}}.
\item \code{\link[=isTranslateCall]{isTranslateCall()}} returns \code{TRUE} if \code{call} is a \link[base:call]{call} to
\code{\link[=translate]{translate()}} and \code{FALSE} othwerwise.
}
}
\description{
Find and extract strings passed to \code{\link[=translate]{translate()}} in an
\link[base:expression]{expression} vector.

Functions described here should not be used by end users.
}
\details{
\code{\link[=getTranslationsFromExpression]{getTranslationsFromExpression()}} is the internal \emph{main} mechanism. Other
functions here are helper functions called by the former. Extracted strings
(from a single call) are concatenated before being returned.

Each extracted string is uniquely identified by a string created by
\code{\link[=getStringId]{getStringId()}}. Identifiers are considered to be collision-resistant.

\code{\link[=isTranslateCall]{isTranslateCall()}} detects calls made to \code{\link[=translate]{translate()}}. There are two
possibilities.
\enumerate{
\item A call that depends on the \link[base:search]{search} path is said to be
\emph{implicit}.
\item A call that directly refers this package it is said to be \emph{explicit}.
}

Implicit calls to \code{\link[=translate]{translate()}} are discouraged because they are considered
to be a bad coding practice.
}
\note{
The author was inspired by the source code of \code{\link[tools:xgettext]{tools::xgettext()}}.
This function convinced him to redesign the previous iteration of
\code{\link[=getTranslationsFromExpression]{getTranslationsFromExpression()}} (which no longer exists). Many
thanks to the \emph{original author} and to \verb{R Core Team}.
}
\examples{
implicitCall <- str2lang('translate("hello, world!")')
explicitCall <- str2lang('transltr::translate("hello, world!")')

transltr:::isTranslateCall(implicitCall) # TRUE
transltr:::isTranslateCall(explicitCall) # TRUE

expr1 <- str2lang('transltr::translate("hello, ", "world!", lang = "en")')
transltr:::getTranslationsFromExpression(expr1)

expr2 <- str2lang('translate("hello, ", "world!")')
transltr:::getTranslationsFromExpression(expr2)

identical(
    transltr:::getStringId("hello, world!"),
    "fcb655f3a969048c07294cfa7ef53af4") # TRUE

}
\seealso{
\code{\link[sodium:hash]{sodium::hash()}}

\code{\link[tools:xgettext]{tools::xgettext()}}
}
\author{
Jean-Mathieu Potvin (\href{mailto:jeanmathieupotvin@ununoctium.dev}{jeanmathieupotvin@ununoctium.dev})
}
\keyword{internal}
