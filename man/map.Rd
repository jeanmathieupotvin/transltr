% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils.R
\name{map}
\alias{map}
\alias{vapply1i}
\alias{vapply1c}
\title{Apply a function over recursive elements}
\usage{
map(fun, ..., moreArgs = list())

vapply1i(x, fun, ..., useNames = FALSE)

vapply1c(x, fun, ..., useNames = FALSE)
}
\arguments{
\item{fun}{Passed to argument \code{FUN} of \code{\link[base:mapply]{base::.mapply()}} and \code{\link[base:lapply]{base::vapply()}}.}

\item{...}{Passed to \code{\link[base:mapply]{base::.mapply()}} and \code{\link[base:lapply]{base::vapply()}}.}

\item{x}{Passed to argument \code{X} of \code{\link[base:lapply]{base::vapply()}}.}

\item{useNames}{Passed to argument \code{USE.NAMES} of \code{\link[base:lapply]{base::vapply()}}.}
}
\value{
\code{\link[=vapply1i]{vapply1i()}} returns an integer vector.

\code{\link[=vapply1c]{vapply1c()}} returns a character vector.

\code{\link[=map]{map()}} returns a list.

All outputs always have a length equal to the length of \code{x}.
}
\description{
Convenient wrapper functions to \code{\link[base:mapply]{base::.mapply()}} and \code{\link[base:lapply]{base::vapply()}}.
The latter has a predetermined and constant return value compared to its
\pkg{base} equivalent.
}
\author{
Jean-Mathieu Potvin (\href{mailto:jm@potvin.xyz}{jm@potvin.xyz})
}
\keyword{internal}
