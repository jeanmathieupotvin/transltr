% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/src-translations-files.R
\name{Translations Source Files}
\alias{Translations Source Files}
\title{Translations source files}
\description{
A \emph{translations source file} (TSF) is a plain text Markdown file (most
likely) generated by \code{\link[=write_translations]{write_translations()}}. It contains source and unparsed
translations and relevant metadata. It can be viewed as a portable and
human-readable serialization of a \code{\link{Translator}} object. It
is meant to be easily sharable with non-technical collaborators such as
translators and reviewers.
}
\details{
A project may use more than one TSF if required. The actual mechanism to
do so is yet to be determined (coming soon).
}
\section{Importing a translations source file}{

A TSF may be imported back into a \R session with function
\code{\link[=read_translations]{read_translations()}}. It is parsed back into a \code{\link{Translator}}
object.
}

\section{Sharing translations source file}{

The intent behind TSFs is to be shared with non-technical and/or external
collaborators such as professional translators. They may iterate on them
by modifying and expanding the contents of existing source blocks. Their
contribution will be used at runtime when the files are parsed back into
\code{\link{Translator}} objects. See below for details.
}

\section{General sructure}{

A TSF is divided into two parts: the \emph{header} and the \emph{translations}. It
follows the usual syntax of \href{https://commonmark.org/}{CommonMark} with
one exception: it requires a \href{https://yaml.org/}{YAML} header.

Translations are further split into so-called \emph{blocks}. Each block contains
source information and translations.
\subsection{Header}{

The header contains metadata required for parsing purposes. You may also add
further fields to the header in no preferred order. It must be enclosed by a
pair of separators (three consecutive dashes) located on separate lines.
In-line headers are disallowed for better readability.

The inner contents (what is between the separators) is always formatted
according to what the \href{https://yaml.org/}{YAML} format prescribes. What it
\emph{must} contain depends on the underlying \code{template_version}. This field is
mandatory no matter the version and is used for parsing purposes. See
sections below.
}

\subsection{Blocks}{

A TSF contains one or more blocks. Each source text that must be translated
has a corresponding block. Blocks are mutually independent and are parsed
individually. They are not required to contain translations under the same
language(s). How they are structured depends on the underlying values of
header's field \code{template_version}. See sections below.

A block always has at least four components.
\enumerate{
\item The \strong{source text} to be translated.
\item A \strong{reproducible hash} generated from the source text. It is used as a
unique identifier for the underlying block.
\item The \strong{location} of the source text in the project. Since the same source
text can be reused multiple times, it may have multiple locations.
\item One or more \strong{translations} of the source text. Each translation has
a corresponding \emph{language key}. See section \emph{Language keys} below.
}

Each block is parsed as a \code{\link{Block}} object internally.
}
}

\section{Language keys}{

Package \code{\link{transltr}} uses so-called \emph{language keys} to uniquely
identify a native language in a (possibly) more concise way. This is
convenient for portability and universality. For example, \code{日本語} (Japanese
or Nihongo) could be identified by the ASCII string \code{jp} (or \code{jp-utf8},
\code{jp-eucjp}, etc.) in TSFs.

Language keys can be (almost) any character string. Users have full control
over them and are free to use whatever they want.

Language keys appear in blocks but the header (usually) contains a global
mandatory field \code{language_keys} which maps keys to full native language
names.

\if{html}{\out{<div class="sourceCode yaml">}}\preformatted{language_keys:
  language-key-1: full-native-language-name-1
  language-key-2: full-native-language-name-2
  ...
}\if{html}{\out{</div>}}
}

\section{Template version 1}{


This is the current default version used to format TSFs.
\subsection{Header}{

There are \code{6} mandatory header fields. They must be left as is. Users may
only modify and/or add further entries to \code{language_keys}.\tabular{llll}{
   \strong{Field} \tab \strong{YAML type} \tab \strong{R type} \tab \strong{Example} \cr
   \code{template_version} \tab Integer \tab \code{integer(1)} \tab \code{1} \cr
   \code{generated_by} \tab String \tab \code{character(1)} \tab \verb{R package transltr 0.0.1} \cr
   \code{generated_on} \tab String \tab \code{character(1)} \tab \verb{August 22, 2024 @ 08:00 UTC} \cr
   \code{hash_algorithm} \tab String \tab \code{character(1)} \tab \code{blake2b} \cr
   \code{hash_length} \tab Integer \tab \code{integer(1)} \tab \code{32} \cr
   \code{language_keys} \tab Map \tab \code{character()}\if{html}{\out{<br/>}}(Named) \tab \code{fr: Français}\if{html}{\out{<br/>}}\code{language-key: full-language-name} \cr
}

}

\subsection{Blocks}{

Blocks are structured according to this template.

\if{html}{\out{<div class="sourceCode md">}}\preformatted{# \{\{ source-text-reproducible-hash \}\}

| Source script | Start              | End                |
| ------------- | -------------------|------------------- |
| `...`         | `line X, column X` | `line X, column X` |
| `...`         | `line X, column X` | `line X, column X` |

## \{\{ source-language-key \}\}

Extracted source text (as is).

## language-key-A

Source text translated in language A.

## language-key-B

Source text translated in language B.

...
}\if{html}{\out{</div>}}

Spaces before and after titles (\verb{#} and \verb{##}) are ignored.
}

\subsection{Rules}{

There are three \strong{important rules to follow}.
\itemize{
\item Never manually modify information enclosed by \verb{\{\{} and \verb{\}\}}.
\item Never manually add further (new) blocks. They are generated automatically
from source scripts.
\item Ensure all language keys have a corresponding entry in  header's field
\code{language_keys}.
}
}
}

\seealso{
\code{\link[=read_translations]{read_translations()}},
\code{\link[=write_translations]{write_translations()}},
\code{\link[=extract_src_header]{extract_src_header()}},
\code{\link[=from_src_header]{from_src_header()}},
\code{\link[=extract_src_blocks]{extract_src_blocks()}},
\code{\link[=from_src_block]{from_src_block()}},
\code{\link[=new_block]{new_block()}}
}
