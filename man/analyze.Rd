% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/analyze.R
\name{analyze}
\alias{analyze}
\title{Extract text from source code}
\usage{
analyze(file = character(1L))
}
\arguments{
\item{file}{A file path. It must point to an existing \R script.}
}
\value{
A named list of length 6 containing the following elements:

\item{\code{file}}{Path to the underlying \R script. See \code{file} above.}
\item{\code{workingDir}}{Current working directory.}
\item{\code{encoding}}{Encoding of \code{file}.}
\item{\code{timeStamp}}{Last time \code{file} was modified in Coordinated Universal
Time (UTC).}
\item{\code{nCalls}}{Number of detected calls to \code{\link[=translate]{translate()}}.}
\item{\code{text}}{A list. See below.}

Each element of \code{text} is itself a named list of length 2 containing
the following elements:

\item{\code{location}}{The \code{location} of a call to \code{\link[=translate]{translate()}} in \code{file}.
The format is \code{"Ln X, Col Y"}, where \code{X} and \code{Y} are positive integers.}
\item{\code{value}}{The actual value passed to formal argument \code{text} of
\code{\link[=translate]{translate()}} either by name (preferred) or by position.}
}
\description{
Statically \code{\link[=analyze]{analyze()}} \R scripts (without executing the source code) and
extract character strings to be translated.
}
\details{
The internal engine relies on \code{\link[base:parse]{base::parse()}} to decompose \R code into
sequences of \emph{tokens} (single elements of the language). For more information
on \R tokens, see \code{\link[utils:getParseData]{utils::getParseData()}}.
}
\note{
What follows describes the steps that \code{\link[=analyze]{analyze()}} goes through each time it
is called. \strong{Users typically do not need to bother with these details.}
\enumerate{
\item Contents of \code{file} is first transformed into a sequence of tokens by
\code{\link[=tokenize]{tokenize()}}. Such a sequence is internally called a \emph{stream}. Empty
strings representing \code{expr} tokens are conveniently removed.
\item Calls (\code{'('} tokens) made to \code{\link[=translate]{translate()}} in the \code{stream} are located
by \code{\link[=findCalls]{findCalls()}}. This function extracts indices of the underlying
\code{SYMBOL_FUNCTION_CALL} tokens.
\item For each index returned by \code{\link[=findCalls]{findCalls()}}, the \code{stream} is traversed by
\code{\link[=findCallEnd]{findCallEnd()}} to locate where each call ends. It does so by attempting
to detect a matching outer \code{')'} token.
\item The stream is split into many sub-streams according to what \code{\link[=findCalls]{findCalls()}}
and \code{\link[=findCallEnd]{findCallEnd()}} returned. Each sub-stream is parsed as an unevaluated
\link[base:call]{call} object by \code{\link[=parseStream]{parseStream()}}.
\item The actual value passed to argument \code{text} is extracted from each call
by function \code{\link[=extractCallArgumentValue]{extractCallArgumentValue()}}.
\item The extracted values are checked.
}

Since \code{\link[=analyze]{analyze()}} performs a static code analysis, extracted values must be
litteral character strings. With further work, this limitation could be
lifted (for some cases) in the future.
}
\author{
Jean-Mathieu Potvin (\href{mailto:jm@potvin.xyz}{jm@potvin.xyz})
}
\keyword{internal}
