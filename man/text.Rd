% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/text.R
\name{text_normalize}
\alias{text_normalize}
\alias{text_hash}
\title{Normalize Text}
\usage{
text_normalize(..., .concat = " ")

text_hash(.lang = "", .text = "", .algo = get_hash_algorithms())
}
\arguments{
\item{...}{Any number of character vectors.}

\item{.concat}{A character string used to concatenate values.}

\item{.lang}{A character string. A language.}

\item{.text}{A character string.}

\item{.algo}{A non-empty and non-\link[base:NA]{NA} character string. The
algorithm to use when hashing \code{.lang} and \code{.text}.}
}
\value{
A character string. \code{\link[=text_hash]{text_hash()}} returns \code{NULL} for unknown
\code{.algo} values.
}
\description{
These functions are meant to be used as \emph{building blocks} and do not
validate their inputs for maximum efficiency.

\code{\link[=text_normalize]{text_normalize()}} ensures consistency of input text, allowing it to be
written in a variety of ways.

\code{\link[=text_hash]{text_hash()}} maps an arbitrary character string (of any length) to a
fixed-length output.
}
\details{
In what follows, a space character is defined as being an ASCII regular
space or an horizontal tab (\verb{\\t}). A new line is defined an ASCII line
feed (\verb{\\n}).

\code{\link[=text_normalize]{text_normalize()}} constructs a normalized string from all single-line and
multi-line strings passed to \code{...}. All underlying values are (implicitly)
coerced to character values in the process. It does so by going through
these 5 steps.
\enumerate{
\item It removes implicit new lines and spaces used for indentation from
multi-line strings. Empty lines are preserved.
\item It replaces empty values by a new line.
\item It concatenates values into a single character string using \code{.concat}.
\item It removes leading and/or trailing new lines and/or spaces, including
those that could had been introduced temporarily at previous steps.
\item It replaces substrings of space characters by a single space.
}

\code{\link[=text_hash]{text_hash()}} returns a reproducible hash generated from \code{.lang} and \code{.text}
using the algorithm given by \code{.algo}.
}
\note{
I am not satisfied with the current implementation of \code{\link[=text_normalize]{text_normalize()}}.
It \emph{does the job}, but I believe it is (1) \emph{ugly} and (2) not fast enough.
Using \code{\link[=gsub]{gsub()}} five times yields a huge performance penalty. Advices are
welcome. I will absolutely revisit this function in the future.
}
\examples{
x1 <- "
  Lorem Ipsum is simply dummy text of the printing and typesetting industry.

  Lorem Ipsum has been the industry's standard dummy text ever since the 1500s,
  when an unknown printer took a galley of type and scrambled it to make a type
  specimen book."

x2 <- c(
  "",
  "Lorem Ipsum is simply dummy text of the printing and typesetting industry.",
  "",
  "Lorem Ipsum has been the industry's standard dummy text ever since the 1500s,",
  "when an unknown printer took a galley of type and scrambled it to make a type",
  "specimen book.",
  "")

str1 <- transltr:::text_normalize(x1)
str2 <- transltr:::text_normalize(x2)
identical(str1, str2) ## TRUE

cat(str1, "\n")
cat(str2, "\n")

## Beware of multi-line strings missing proper indentation purposes. These
## won't be normalized as expected. Use at least one space after new lines.
x <- "
Lorem Ipsum is simply dummy text of the printing and typesetting industry.

    Lorem Ipsum has been the industry's standard dummy text ever since the 1500s,
    when an unknown printer took a galley of type and scrambled it to make a type
    specimen book. It has survived not only five centuries, but also the leap into
 electronic typesetting, remaining essentially unchanged. It was popularised in
    the 1960s with the release of Letraset sheets containing Lorem Ipsum passages,
 and more recently with desktop publishing software like Aldus PageMaker
including versions of Lorem Ipsum."

cat(transltr:::text_normalize(x), "\n")

}
\keyword{internal}
