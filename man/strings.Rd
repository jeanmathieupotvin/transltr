% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/strings.R
\name{str_strip_empty}
\alias{str_strip_empty}
\alias{str_left_pad}
\title{Manipulate Strings}
\usage{
str_strip_empty(x = character(), which = c("both", "leading", "trailing"))

str_left_pad(x = character(), len = NULL, pad = " ")
}
\arguments{
\item{x}{A character vector. It can be empty or contain empty elements.}

\item{which}{A character string equal to \code{both}, \code{leading}, or \code{trailing}.
What to remove from \code{x}.}

\item{len}{A non-\link[base:NA]{NA} integer. Desired length for individual
elements of \code{x} as reported by
\code{\link[base:nchar]{base::nchar(, type = "chars")}}. It can further be
\code{NULL} for \code{\link[=str_left_pad]{str_left_pad()}}. This internally sets \code{len} equal to
the length of the longest element of \code{x}.}

\item{pad}{A non-empty and non-\link[base:NA]{NA} character string used to
separate the results.}
}
\value{
A character vector.
}
\description{
These functions perform common string transformations.
}
\details{
\code{\link[=str_strip_empty]{str_strip_empty()}} strips leading and/or trailing empty elements from
a character vector.

\code{\link[=str_left_pad]{str_left_pad()}} appends a single character to elements of a character
vector until they reach a target length.

\code{\link[=str_trim]{str_trim()}} wraps \code{\link[base:strtrim]{base::strtrim()}} and trims elements of a character
vector until they reach a target length.
}
\note{
To strip all empty strings, use \code{\link[base:nchar]{base::nzchar()}}. It will be much faster.
}
\examples{
transltr:::str_strip_empty("") # character(0)

x <- c("", "", "a", "b", "", "c", "")

transltr:::str_strip_empty(x)             # c("a", "b", "", "c")
transltr:::str_strip_empty(x, "leading")  # c("a", "b", "", "c", "")
transltr:::str_strip_empty(x, "trailing") # c("", "", "a", "b", "", "c")

}
\concept{string functions}
\keyword{internal}
