% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/strings.R
\name{strip_empty_strings}
\alias{strip_empty_strings}
\alias{left_pad_strings}
\alias{trim_strings}
\alias{sanitize_strings}
\title{Manipulate Strings}
\usage{
strip_empty_strings(x = character(), which = c("both", "leading", "trailing"))

left_pad_strings(x = character(), len = NULL, pad = " ")

trim_strings(x = character(), len = 80L)

sanitize_strings(x = character(), concat = " ")
}
\arguments{
\item{x}{A character vector. It can be empty or contain empty elements.}

\item{which}{A character string equal to \code{both}, \code{leading}, or \code{trailing}.
What to remove from \code{x}.}

\item{len}{A non-\link[base:NA]{NA} integer. Desired length for individual
elements of \code{x} as reported by
\code{\link[base:nchar]{base::nchar(, type = "chars")}}. It can further be
\code{NULL} for \code{\link[=left_pad_strings]{left_pad_strings()}}. This internally sets \code{len} equal to
the length of the longest element of \code{x}.}

\item{pad}{A non-empty and non-\link[base:NA]{NA} character string used to
separate the results.}

\item{concat}{A non-\link[base:NA]{NA} character string used to concatenate
elements of \code{x}.}
}
\value{
A character vector.
}
\description{
These functions perform common string transformations.
}
\details{
\code{\link[=strip_empty_strings]{strip_empty_strings()}} strips leading and/or trailing empty elements from
a character vector.

\code{\link[=left_pad_strings]{left_pad_strings()}} appends a single character to elements of a character
vector until they reach a target length.

\code{\link[=trim_strings]{trim_strings()}} wraps \code{\link[base:strtrim]{base::strtrim()}} and trims elements of a character
vector until they reach a target length.

\code{\link[=sanitize_strings]{sanitize_strings()}} does three things to elements of a character vector.
\itemize{
\item It concatenates its elements into a single one.
\item It replaces substrings of repeated space characters (spaces and/or tabs)
by a single space.
\item It removes leading space, tab, and new line characters.
}
}
\note{
To strip all empty strings, use \code{\link[base:nchar]{base::nzchar()}}. It will be much faster.

\code{\link[=sanitize_strings]{sanitize_strings()}} will likely change in a neear future. This function
is not robust enough. It should support escaped characters, escaped
sequences, etc.
}
\examples{
transltr:::strip_empty_strings("") # character(0)

x <- c("", "", "a", "b", "", "c", "")

transltr:::strip_empty_strings(x)             # c("a", "b", "", "c")
transltr:::strip_empty_strings(x, "leading")  # c("a", "b", "", "c", "")
transltr:::strip_empty_strings(x, "trailing") # c("", "", "a", "b", "", "c")

}
\seealso{
Other string functions: 
\code{\link{to_string}()}
}
\concept{string functions}
\keyword{internal}
