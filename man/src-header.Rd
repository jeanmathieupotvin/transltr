% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/src-header.R
\name{extract_src_header}
\alias{extract_src_header}
\alias{from_src_header}
\alias{from_src_header_version_1}
\title{Extract, parse, and validate source headers}
\usage{
extract_src_header(x = character())

from_src_header(x = character())

## Called internally by from_src_header()
from_src_header_version_1(
  template_version = 1L,
  generated_by     = get_generated_by(),
  generated_on     = get_generated_on(),
  hash_algorithm   = get_hash_algorithms(),
  hash_length      = 32L,
  language_keys    = list(en = "English")
)
}
\arguments{
\item{x}{A character vector of source (unparsed) text lines.}

\item{template_version}{An integer. The translations source file's format
version. See \code{\link[=get_template_versions]{get_template_versions()}} for available versions.}

\item{generated_by}{A character string. How did the translations source
file was generated? This will most likely be a version of the package,
but any other mechanism is fine. Package \code{\link{transltr}} embraces
portability. See \code{\link[=get_generated_by]{get_generated_by()}} for more information.}

\item{generated_on}{A character string. When was the translations source
file generated? See \code{\link[=get_generated_on]{get_generated_on()}} for the actual format.}

\item{hash_algorithm}{A character string. The algorithm to use when
hashing and identifying source texts that requires translation. It
must be a value returned by \code{\link[=get_hash_algorithms]{get_hash_algorithms()}}.}

\item{hash_length}{An integer. The desired number of hexadecimal characters
to use when generating hashes with \code{hash_algorithm}. The length must
comply with what the latter prescribes. See \code{\link[=get_hash_length_range]{get_hash_length_range()}} for
more information.}

\item{language_keys}{A named list of character strings, or a named character
vector. It can be empty.
\itemize{
\item The values are \emph{languages}. For example, \code{"English"}, \code{"Français"},
\code{"日本語"}, etc.
\item The names are \emph{keys} that uniquely identify corresponding languages.
As such, they are referred to as \emph{language keys}. For example,
\code{en}, \code{fr}, \code{jp}, etc.
}

Users retain full control over names and keys, and are free to use
whatever makes sense to them.}

\item{...}{Further custom fields. They must always be named.}
}
\value{
\code{\link[=extract_src_header]{extract_src_header()}} returns a character vector representing source
YAML lines ready to be parsed as an \R list by \code{\link[=from_src_header]{from_src_header()}}.

\code{\link[=from_src_header]{from_src_header()}} returns a named list. Its contents depends on the
underlying (parsed) \code{template_version} value.

\code{\link[=from_src_header_version_1]{from_src_header_version_1()}} returns a named list of length 7 that
contains parsed (and valid) values of its arguments. It also returns
a \code{further_fields} element which is a named list constructed from \code{...}.
}
\description{
Extract headers from \emph{translations source files}, parse their contents,
and validate it. These are Markdown files containing translations and
metadata formatted according to what \code{\link{transltr}} prescribes.
}
\details{
Package \code{\link{transltr}} stores translations and relevent metadata
into a single plain Markdown file. As such, it follows the usual syntax
of \href{https://commonmark.org/}{CommonMark} with one exception: it requires
a \href{https://yaml.org/}{YAML} header. While it is strongly recommended to
keep that header at the very top of the file, it can be anywhere within it.
\subsection{General structure}{

Translations source files are divided into two parts: the \strong{header}
and the actual \strong{translations}. Its general structure is as follows.

\if{html}{\out{<div class="sourceCode plain">}}\preformatted{# File start
---
Header
---
# Empty line(s)
Translations
# File end
}\if{html}{\out{</div>}}

The YAML header must always be enclosed by a pair of separators (three
consecutive dashes) located on separate lines. In-line headers are
disallowed for better readability.
}

\subsection{Template versions}{

Since the format may change in the future, multiple ones may need to be
supported on a long-term basis. Therefore, the header always requires a
\code{template_version} field that specifies required header fields and how
translations are structured.
}

\subsection{Template version 1}{

This version enforces \code{7} mandatory header fields. As long as they have
keys (names), users may add any further fields to this list. A valid example
is provided below.

\if{html}{\out{<div class="sourceCode yaml">}}\preformatted{template_version: 1
generated_by: R package transltr 0.0.1
generated_on: August 22, 2024 @ 08:00 UTC
hash_algorithm: blake2b
hash_length: 32
language_keys:
    en: English
    fr: Français
    es: Español
    jp: 日本語
}\if{html}{\out{</div>}}

Further fields may appear anywhere within the header (there is no preferred
order).
}
}
\note{
Note that \code{\link[=from_src_header_version_1]{from_src_header_version_1()}} assumes \code{template_version} is
always equal to \code{1} and ignores any value passed to it. The argument is
included to ease the implementation of \code{\link[=from_src_header]{from_src_header()}}. The latter
is in charge of validating it.
}
\seealso{
\code{\link[=extract_src_blocks]{extract_src_blocks()}}, \code{\link[=from_src_block]{from_src_block()}}
}
\concept{source header mechanisms}
\keyword{internal}
