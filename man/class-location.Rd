% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/class-location.R
\name{location}
\alias{location}
\alias{Location}
\alias{is_location}
\alias{format.Location}
\alias{print.Location}
\alias{c.Location}
\alias{merge_locations}
\title{Source Locations}
\usage{
location(path = tempfile(), line1 = 1L, col1 = 1L, line2 = 1L, col2 = 1L)

is_location(x)

\method{format}{Location}(x, ...)

\method{print}{Location}(x, ...)

\method{c}{Location}(...)

merge_locations(...)
}
\arguments{
\item{path}{A non-empty and non-\link[base:NA]{NA} character string. The
underlying source file.}

\item{line1, col1}{A non-empty integer vector of non-\link[base:NA]{NA} values.
The (inclusive) starting point(s) of what is being referenced.}

\item{line2, col2}{A non-empty integer vector of non-\link[base:NA]{NA} values.
The (inclusive) end(s) of what is being referenced.}

\item{x}{Any \R object. Obviously, an object of class \code{\link{Location}}
for the S3 methods defined here.}

\item{...}{Further arguments passed to or from other methods.}
}
\value{
\code{\link[=location]{location()}} returns a named list of length 5 and of class
\code{\link{Location}}. It contains the values of \code{path}, \code{line1}, \code{col1},
\code{line2}, and \code{col2}.

\code{\link[=is_location]{is_location()}} returns a logical.

\code{\link[=format.Location]{format.Location()}} returns a character string.

\code{\link[=print.Location]{print.Location()}} returns argument \code{x} invisibly.
}
\description{
An internal class to represent source locations.
}
\details{
A \emph{source location} is a line/column range within any text file.
\code{\link{Location}} objects may refer multiple distinct ranges within
the same source script. This is why arguments \code{line1}, \code{col1}, \code{line2}, and
\code{col2} accept integer vectors (and not only scalar values).
}
\note{
\code{\link[=location]{location()}} is mostly used to restructure information returned by
\code{\link[utils:getParseData]{utils::getParseData()}}.
}
\keyword{internal}
